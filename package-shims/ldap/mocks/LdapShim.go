// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	ldap "github.com/go-ldap/ldap/v3"

	mock "github.com/stretchr/testify/mock"

	tls "crypto/tls"
)

// LdapShim is an autogenerated mock type for the LdapShim type
type LdapShim struct {
	mock.Mock
}

type LdapShim_Expecter struct {
	mock *mock.Mock
}

func (_m *LdapShim) EXPECT() *LdapShim_Expecter {
	return &LdapShim_Expecter{mock: &_m.Mock}
}

// Bind provides a mock function with given fields: username, password
func (_m *LdapShim) Bind(username string, password string) error {
	ret := _m.Called(username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LdapShim_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type LdapShim_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *LdapShim_Expecter) Bind(username interface{}, password interface{}) *LdapShim_Bind_Call {
	return &LdapShim_Bind_Call{Call: _e.mock.On("Bind", username, password)}
}

func (_c *LdapShim_Bind_Call) Run(run func(username string, password string)) *LdapShim_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *LdapShim_Bind_Call) Return(_a0 error) *LdapShim_Bind_Call {
	_c.Call.Return(_a0)
	return _c
}

// CloseConn provides a mock function with given fields:
func (_m *LdapShim) CloseConn() {
	_m.Called()
}

// LdapShim_CloseConn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseConn'
type LdapShim_CloseConn_Call struct {
	*mock.Call
}

// CloseConn is a helper method to define mock.On call
func (_e *LdapShim_Expecter) CloseConn() *LdapShim_CloseConn_Call {
	return &LdapShim_CloseConn_Call{Call: _e.mock.On("CloseConn")}
}

func (_c *LdapShim_CloseConn_Call) Run(run func()) *LdapShim_CloseConn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LdapShim_CloseConn_Call) Return() *LdapShim_CloseConn_Call {
	_c.Call.Return()
	return _c
}

// DialURL provides a mock function with given fields: addr, opts
func (_m *LdapShim) DialURL(addr string, opts ...ldap.DialOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, addr)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...ldap.DialOpt) error); ok {
		r0 = rf(addr, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LdapShim_DialURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DialURL'
type LdapShim_DialURL_Call struct {
	*mock.Call
}

// DialURL is a helper method to define mock.On call
//   - addr string
//   - opts ...ldap.DialOpt
func (_e *LdapShim_Expecter) DialURL(addr interface{}, opts ...interface{}) *LdapShim_DialURL_Call {
	return &LdapShim_DialURL_Call{Call: _e.mock.On("DialURL",
		append([]interface{}{addr}, opts...)...)}
}

func (_c *LdapShim_DialURL_Call) Run(run func(addr string, opts ...ldap.DialOpt)) *LdapShim_DialURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]ldap.DialOpt, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(ldap.DialOpt)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *LdapShim_DialURL_Call) Return(_a0 error) *LdapShim_DialURL_Call {
	_c.Call.Return(_a0)
	return _c
}

// EscapeFilter provides a mock function with given fields: arg1
func (_m *LdapShim) EscapeFilter(arg1 string) string {
	ret := _m.Called(arg1)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(arg1)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LdapShim_EscapeFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EscapeFilter'
type LdapShim_EscapeFilter_Call struct {
	*mock.Call
}

// EscapeFilter is a helper method to define mock.On call
//   - arg1 string
func (_e *LdapShim_Expecter) EscapeFilter(arg1 interface{}) *LdapShim_EscapeFilter_Call {
	return &LdapShim_EscapeFilter_Call{Call: _e.mock.On("EscapeFilter", arg1)}
}

func (_c *LdapShim_EscapeFilter_Call) Run(run func(arg1 string)) *LdapShim_EscapeFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LdapShim_EscapeFilter_Call) Return(_a0 string) *LdapShim_EscapeFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

// NewSearchRequest provides a mock function with given fields: BaseDN, Scope, DerefAliases, SizeLimit, TimeLimit, TypesOnly, Filter, Attributes, Controls
func (_m *LdapShim) NewSearchRequest(BaseDN string, Scope int, DerefAliases int, SizeLimit int, TimeLimit int, TypesOnly bool, Filter string, Attributes []string, Controls []ldap.Control) *ldap.SearchRequest {
	ret := _m.Called(BaseDN, Scope, DerefAliases, SizeLimit, TimeLimit, TypesOnly, Filter, Attributes, Controls)

	var r0 *ldap.SearchRequest
	if rf, ok := ret.Get(0).(func(string, int, int, int, int, bool, string, []string, []ldap.Control) *ldap.SearchRequest); ok {
		r0 = rf(BaseDN, Scope, DerefAliases, SizeLimit, TimeLimit, TypesOnly, Filter, Attributes, Controls)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ldap.SearchRequest)
		}
	}

	return r0
}

// LdapShim_NewSearchRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewSearchRequest'
type LdapShim_NewSearchRequest_Call struct {
	*mock.Call
}

// NewSearchRequest is a helper method to define mock.On call
//   - BaseDN string
//   - Scope int
//   - DerefAliases int
//   - SizeLimit int
//   - TimeLimit int
//   - TypesOnly bool
//   - Filter string
//   - Attributes []string
//   - Controls []ldap.Control
func (_e *LdapShim_Expecter) NewSearchRequest(BaseDN interface{}, Scope interface{}, DerefAliases interface{}, SizeLimit interface{}, TimeLimit interface{}, TypesOnly interface{}, Filter interface{}, Attributes interface{}, Controls interface{}) *LdapShim_NewSearchRequest_Call {
	return &LdapShim_NewSearchRequest_Call{Call: _e.mock.On("NewSearchRequest", BaseDN, Scope, DerefAliases, SizeLimit, TimeLimit, TypesOnly, Filter, Attributes, Controls)}
}

func (_c *LdapShim_NewSearchRequest_Call) Run(run func(BaseDN string, Scope int, DerefAliases int, SizeLimit int, TimeLimit int, TypesOnly bool, Filter string, Attributes []string, Controls []ldap.Control)) *LdapShim_NewSearchRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int), args[3].(int), args[4].(int), args[5].(bool), args[6].(string), args[7].([]string), args[8].([]ldap.Control))
	})
	return _c
}

func (_c *LdapShim_NewSearchRequest_Call) Return(_a0 *ldap.SearchRequest) *LdapShim_NewSearchRequest_Call {
	_c.Call.Return(_a0)
	return _c
}

// Search provides a mock function with given fields: searchRequest
func (_m *LdapShim) Search(searchRequest *ldap.SearchRequest) (*ldap.SearchResult, error) {
	ret := _m.Called(searchRequest)

	var r0 *ldap.SearchResult
	if rf, ok := ret.Get(0).(func(*ldap.SearchRequest) *ldap.SearchResult); ok {
		r0 = rf(searchRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ldap.SearchResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ldap.SearchRequest) error); ok {
		r1 = rf(searchRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LdapShim_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type LdapShim_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - searchRequest *ldap.SearchRequest
func (_e *LdapShim_Expecter) Search(searchRequest interface{}) *LdapShim_Search_Call {
	return &LdapShim_Search_Call{Call: _e.mock.On("Search", searchRequest)}
}

func (_c *LdapShim_Search_Call) Run(run func(searchRequest *ldap.SearchRequest)) *LdapShim_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ldap.SearchRequest))
	})
	return _c
}

func (_c *LdapShim_Search_Call) Return(_a0 *ldap.SearchResult, _a1 error) *LdapShim_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// StartTLS provides a mock function with given fields: config
func (_m *LdapShim) StartTLS(config *tls.Config) error {
	ret := _m.Called(config)

	var r0 error
	if rf, ok := ret.Get(0).(func(*tls.Config) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LdapShim_StartTLS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartTLS'
type LdapShim_StartTLS_Call struct {
	*mock.Call
}

// StartTLS is a helper method to define mock.On call
//   - config *tls.Config
func (_e *LdapShim_Expecter) StartTLS(config interface{}) *LdapShim_StartTLS_Call {
	return &LdapShim_StartTLS_Call{Call: _e.mock.On("StartTLS", config)}
}

func (_c *LdapShim_StartTLS_Call) Run(run func(config *tls.Config)) *LdapShim_StartTLS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tls.Config))
	})
	return _c
}

func (_c *LdapShim_StartTLS_Call) Return(_a0 error) *LdapShim_StartTLS_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewLdapShim interface {
	mock.TestingT
	Cleanup(func())
}

// NewLdapShim creates a new instance of LdapShim. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLdapShim(t mockConstructorTestingTNewLdapShim) *LdapShim {
	mock := &LdapShim{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
