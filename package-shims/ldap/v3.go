// Code generated by counterfeiter. DO NOT EDIT.
package v3shim

import (
	"crypto/tls"
	"log"
	"net"

	ber "github.com/go-asn1-ber/asn1-ber"
	ldap "github.com/go-ldap/ldap/v3"
)

//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 -generate
//counterfeiter:generate . V3

// V3 is a generated interface representing the exported functions
// in the github.com/go-ldap/ldap/v3 package.
type V3 interface {
	CompileFilter(arg1 string) (*ber.Packet, error)
	DebugBinaryFile(arg1 string) error
	DecodeControl(arg1 *ber.Packet) (ldap.Control, error)
	DecompileFilter(arg1 *ber.Packet) (string, error)
	Dial(arg1 string, arg2 string) (*ldap.Conn, error)
	DialTLS(arg1 string, arg2 string, arg3 *tls.Config) (*ldap.Conn, error)
	DialURL(arg1 string, arg2 ...ldap.DialOpt) (*ldap.Conn, error)
	DialWithDialer(arg1 *net.Dialer) ldap.DialOpt
	DialWithTLSConfig(arg1 *tls.Config) ldap.DialOpt
	DialWithTLSDialer(arg1 *tls.Config, arg2 *net.Dialer) ldap.DialOpt
	EscapeFilter(arg1 string) string
	FindControl(arg1 []ldap.Control, arg2 string) ldap.Control
	GetLDAPError(arg1 *ber.Packet) error
	IsErrorAnyOf(arg1 error, arg2 ...uint16) bool
	IsErrorWithCode(arg1 error, arg2 uint16) bool
	Logger(arg1 *log.Logger)
	NewAddRequest(arg1 string, arg2 []ldap.Control) *ldap.AddRequest
	NewConn(arg1 net.Conn, arg2 bool) *ldap.Conn
	NewControlBeheraPasswordPolicy() *ldap.ControlBeheraPasswordPolicy
	NewControlManageDsaIT(arg1 bool) *ldap.ControlManageDsaIT
	NewControlMicrosoftNotification() *ldap.ControlMicrosoftNotification
	NewControlMicrosoftServerLinkTTL() *ldap.ControlMicrosoftServerLinkTTL
	NewControlMicrosoftShowDeleted() *ldap.ControlMicrosoftShowDeleted
	NewControlPaging(arg1 uint32) *ldap.ControlPaging
	NewControlString(arg1 string, arg2 bool, arg3 string) *ldap.ControlString
	NewControlSubtreeDelete() *ldap.ControlSubtreeDelete
	NewDelRequest(arg1 string, arg2 []ldap.Control) *ldap.DelRequest
	NewEntry(arg1 string, arg2 map[string][]string) *ldap.Entry
	NewEntryAttribute(arg1 string, arg2 []string) *ldap.EntryAttribute
	NewError(arg1 uint16, arg2 error) error
	NewModifyDNRequest(arg1 string, arg2 string, arg3 bool, arg4 string) *ldap.ModifyDNRequest
	NewModifyDNWithControlsRequest(arg1 string, arg2 string, arg3 bool, arg4 string, arg5 []ldap.Control) *ldap.ModifyDNRequest
	NewModifyRequest(arg1 string, arg2 []ldap.Control) *ldap.ModifyRequest
	NewPasswordModifyRequest(arg1 string, arg2 string, arg3 string) *ldap.PasswordModifyRequest
	NewSearchRequest(arg1 string, arg2 int, arg3 int, arg4 int, arg5 int, arg6 bool, arg7 string, arg8 []string, arg9 []ldap.Control) *ldap.SearchRequest
	NewSimpleBindRequest(arg1 string, arg2 string, arg3 []ldap.Control) *ldap.SimpleBindRequest
	ParseDN(arg1 string) (*ldap.DN, error)
}

type V3Shim struct{}

func (p *V3Shim) CompileFilter(arg1 string) (*ber.Packet, error) {
	return ldap.CompileFilter(arg1)
}

func (p *V3Shim) DebugBinaryFile(arg1 string) error {
	return ldap.DebugBinaryFile(arg1)
}

func (p *V3Shim) DecodeControl(arg1 *ber.Packet) (ldap.Control, error) {
	return ldap.DecodeControl(arg1)
}

func (p *V3Shim) DecompileFilter(arg1 *ber.Packet) (string, error) {
	return ldap.DecompileFilter(arg1)
}

func (p *V3Shim) Dial(arg1 string, arg2 string) (*ldap.Conn, error) {
	return ldap.Dial(arg1, arg2)
}

func (p *V3Shim) DialTLS(arg1 string, arg2 string, arg3 *tls.Config) (*ldap.Conn, error) {
	return ldap.DialTLS(arg1, arg2, arg3)
}

func (p *V3Shim) DialURL(arg1 string, arg2 ...ldap.DialOpt) (*ldap.Conn, error) {
	return ldap.DialURL(arg1, arg2...)
}

func (p *V3Shim) DialWithDialer(arg1 *net.Dialer) ldap.DialOpt {
	return ldap.DialWithDialer(arg1)
}

func (p *V3Shim) DialWithTLSConfig(arg1 *tls.Config) ldap.DialOpt {
	return ldap.DialWithTLSConfig(arg1)
}

func (p *V3Shim) DialWithTLSDialer(arg1 *tls.Config, arg2 *net.Dialer) ldap.DialOpt {
	return ldap.DialWithTLSDialer(arg1, arg2)
}

func (p *V3Shim) EscapeFilter(arg1 string) string {
	return ldap.EscapeFilter(arg1)
}

func (p *V3Shim) FindControl(arg1 []ldap.Control, arg2 string) ldap.Control {
	return ldap.FindControl(arg1, arg2)
}

func (p *V3Shim) GetLDAPError(arg1 *ber.Packet) error {
	return ldap.GetLDAPError(arg1)
}

func (p *V3Shim) IsErrorAnyOf(arg1 error, arg2 ...uint16) bool {
	return ldap.IsErrorAnyOf(arg1, arg2...)
}

func (p *V3Shim) IsErrorWithCode(arg1 error, arg2 uint16) bool {
	return ldap.IsErrorWithCode(arg1, arg2)
}

func (p *V3Shim) Logger(arg1 *log.Logger) {
	ldap.Logger(arg1)
}

func (p *V3Shim) NewAddRequest(arg1 string, arg2 []ldap.Control) *ldap.AddRequest {
	return ldap.NewAddRequest(arg1, arg2)
}

func (p *V3Shim) NewConn(arg1 net.Conn, arg2 bool) *ldap.Conn {
	return ldap.NewConn(arg1, arg2)
}

func (p *V3Shim) NewControlBeheraPasswordPolicy() *ldap.ControlBeheraPasswordPolicy {
	return ldap.NewControlBeheraPasswordPolicy()
}

func (p *V3Shim) NewControlManageDsaIT(arg1 bool) *ldap.ControlManageDsaIT {
	return ldap.NewControlManageDsaIT(arg1)
}

func (p *V3Shim) NewControlMicrosoftNotification() *ldap.ControlMicrosoftNotification {
	return ldap.NewControlMicrosoftNotification()
}

func (p *V3Shim) NewControlMicrosoftServerLinkTTL() *ldap.ControlMicrosoftServerLinkTTL {
	return ldap.NewControlMicrosoftServerLinkTTL()
}

func (p *V3Shim) NewControlMicrosoftShowDeleted() *ldap.ControlMicrosoftShowDeleted {
	return ldap.NewControlMicrosoftShowDeleted()
}

func (p *V3Shim) NewControlPaging(arg1 uint32) *ldap.ControlPaging {
	return ldap.NewControlPaging(arg1)
}

func (p *V3Shim) NewControlString(arg1 string, arg2 bool, arg3 string) *ldap.ControlString {
	return ldap.NewControlString(arg1, arg2, arg3)
}

func (p *V3Shim) NewControlSubtreeDelete() *ldap.ControlSubtreeDelete {
	return ldap.NewControlSubtreeDelete()
}

func (p *V3Shim) NewDelRequest(arg1 string, arg2 []ldap.Control) *ldap.DelRequest {
	return ldap.NewDelRequest(arg1, arg2)
}

func (p *V3Shim) NewEntry(arg1 string, arg2 map[string][]string) *ldap.Entry {
	return ldap.NewEntry(arg1, arg2)
}

func (p *V3Shim) NewEntryAttribute(arg1 string, arg2 []string) *ldap.EntryAttribute {
	return ldap.NewEntryAttribute(arg1, arg2)
}

func (p *V3Shim) NewError(arg1 uint16, arg2 error) error {
	return ldap.NewError(arg1, arg2)
}

func (p *V3Shim) NewModifyDNRequest(arg1 string, arg2 string, arg3 bool, arg4 string) *ldap.ModifyDNRequest {
	return ldap.NewModifyDNRequest(arg1, arg2, arg3, arg4)
}

func (p *V3Shim) NewModifyDNWithControlsRequest(arg1 string, arg2 string, arg3 bool, arg4 string, arg5 []ldap.Control) *ldap.ModifyDNRequest {
	return ldap.NewModifyDNWithControlsRequest(arg1, arg2, arg3, arg4, arg5)
}

func (p *V3Shim) NewModifyRequest(arg1 string, arg2 []ldap.Control) *ldap.ModifyRequest {
	return ldap.NewModifyRequest(arg1, arg2)
}

func (p *V3Shim) NewPasswordModifyRequest(arg1 string, arg2 string, arg3 string) *ldap.PasswordModifyRequest {
	return ldap.NewPasswordModifyRequest(arg1, arg2, arg3)
}

func (p *V3Shim) NewSearchRequest(arg1 string, arg2 int, arg3 int, arg4 int, arg5 int, arg6 bool, arg7 string, arg8 []string, arg9 []ldap.Control) *ldap.SearchRequest {
	return ldap.NewSearchRequest(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
}

func (p *V3Shim) NewSimpleBindRequest(arg1 string, arg2 string, arg3 []ldap.Control) *ldap.SimpleBindRequest {
	return ldap.NewSimpleBindRequest(arg1, arg2, arg3)
}

func (p *V3Shim) ParseDN(arg1 string) (*ldap.DN, error) {
	return ldap.ParseDN(arg1)
}

var _ V3 = new(V3Shim)
