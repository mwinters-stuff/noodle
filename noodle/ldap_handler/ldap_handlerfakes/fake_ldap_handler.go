// Code generated by counterfeiter. DO NOT EDIT.
package ldap_handlerfakes

import (
	"sync"

	"github.com/mwinters-stuff/noodle/noodle/database"
	"github.com/mwinters-stuff/noodle/noodle/ldap_handler"
)

type FakeLdapHandler struct {
	AuthUserStub        func(string, string) (bool, error)
	authUserMutex       sync.RWMutex
	authUserArgsForCall []struct {
		arg1 string
		arg2 string
	}
	authUserReturns struct {
		result1 bool
		result2 error
	}
	authUserReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ConnectStub        func() error
	connectMutex       sync.RWMutex
	connectArgsForCall []struct {
	}
	connectReturns struct {
		result1 error
	}
	connectReturnsOnCall map[int]struct {
		result1 error
	}
	GetGroupUsersStub        func(database.Group) ([]database.UserGroup, error)
	getGroupUsersMutex       sync.RWMutex
	getGroupUsersArgsForCall []struct {
		arg1 database.Group
	}
	getGroupUsersReturns struct {
		result1 []database.UserGroup
		result2 error
	}
	getGroupUsersReturnsOnCall map[int]struct {
		result1 []database.UserGroup
		result2 error
	}
	GetGroupsStub        func() ([]database.Group, error)
	getGroupsMutex       sync.RWMutex
	getGroupsArgsForCall []struct {
	}
	getGroupsReturns struct {
		result1 []database.Group
		result2 error
	}
	getGroupsReturnsOnCall map[int]struct {
		result1 []database.Group
		result2 error
	}
	GetUserStub        func(string) (database.User, error)
	getUserMutex       sync.RWMutex
	getUserArgsForCall []struct {
		arg1 string
	}
	getUserReturns struct {
		result1 database.User
		result2 error
	}
	getUserReturnsOnCall map[int]struct {
		result1 database.User
		result2 error
	}
	GetUserByDNStub        func(string) (database.User, error)
	getUserByDNMutex       sync.RWMutex
	getUserByDNArgsForCall []struct {
		arg1 string
	}
	getUserByDNReturns struct {
		result1 database.User
		result2 error
	}
	getUserByDNReturnsOnCall map[int]struct {
		result1 database.User
		result2 error
	}
	GetUserGroupsStub        func(database.User) ([]database.UserGroup, error)
	getUserGroupsMutex       sync.RWMutex
	getUserGroupsArgsForCall []struct {
		arg1 database.User
	}
	getUserGroupsReturns struct {
		result1 []database.UserGroup
		result2 error
	}
	getUserGroupsReturnsOnCall map[int]struct {
		result1 []database.UserGroup
		result2 error
	}
	GetUsersStub        func() ([]database.User, error)
	getUsersMutex       sync.RWMutex
	getUsersArgsForCall []struct {
	}
	getUsersReturns struct {
		result1 []database.User
		result2 error
	}
	getUsersReturnsOnCall map[int]struct {
		result1 []database.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLdapHandler) AuthUser(arg1 string, arg2 string) (bool, error) {
	fake.authUserMutex.Lock()
	ret, specificReturn := fake.authUserReturnsOnCall[len(fake.authUserArgsForCall)]
	fake.authUserArgsForCall = append(fake.authUserArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AuthUserStub
	fakeReturns := fake.authUserReturns
	fake.recordInvocation("AuthUser", []interface{}{arg1, arg2})
	fake.authUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLdapHandler) AuthUserCallCount() int {
	fake.authUserMutex.RLock()
	defer fake.authUserMutex.RUnlock()
	return len(fake.authUserArgsForCall)
}

func (fake *FakeLdapHandler) AuthUserCalls(stub func(string, string) (bool, error)) {
	fake.authUserMutex.Lock()
	defer fake.authUserMutex.Unlock()
	fake.AuthUserStub = stub
}

func (fake *FakeLdapHandler) AuthUserArgsForCall(i int) (string, string) {
	fake.authUserMutex.RLock()
	defer fake.authUserMutex.RUnlock()
	argsForCall := fake.authUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLdapHandler) AuthUserReturns(result1 bool, result2 error) {
	fake.authUserMutex.Lock()
	defer fake.authUserMutex.Unlock()
	fake.AuthUserStub = nil
	fake.authUserReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) AuthUserReturnsOnCall(i int, result1 bool, result2 error) {
	fake.authUserMutex.Lock()
	defer fake.authUserMutex.Unlock()
	fake.AuthUserStub = nil
	if fake.authUserReturnsOnCall == nil {
		fake.authUserReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.authUserReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) Connect() error {
	fake.connectMutex.Lock()
	ret, specificReturn := fake.connectReturnsOnCall[len(fake.connectArgsForCall)]
	fake.connectArgsForCall = append(fake.connectArgsForCall, struct {
	}{})
	stub := fake.ConnectStub
	fakeReturns := fake.connectReturns
	fake.recordInvocation("Connect", []interface{}{})
	fake.connectMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLdapHandler) ConnectCallCount() int {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return len(fake.connectArgsForCall)
}

func (fake *FakeLdapHandler) ConnectCalls(stub func() error) {
	fake.connectMutex.Lock()
	defer fake.connectMutex.Unlock()
	fake.ConnectStub = stub
}

func (fake *FakeLdapHandler) ConnectReturns(result1 error) {
	fake.connectMutex.Lock()
	defer fake.connectMutex.Unlock()
	fake.ConnectStub = nil
	fake.connectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLdapHandler) ConnectReturnsOnCall(i int, result1 error) {
	fake.connectMutex.Lock()
	defer fake.connectMutex.Unlock()
	fake.ConnectStub = nil
	if fake.connectReturnsOnCall == nil {
		fake.connectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.connectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLdapHandler) GetGroupUsers(arg1 database.Group) ([]database.UserGroup, error) {
	fake.getGroupUsersMutex.Lock()
	ret, specificReturn := fake.getGroupUsersReturnsOnCall[len(fake.getGroupUsersArgsForCall)]
	fake.getGroupUsersArgsForCall = append(fake.getGroupUsersArgsForCall, struct {
		arg1 database.Group
	}{arg1})
	stub := fake.GetGroupUsersStub
	fakeReturns := fake.getGroupUsersReturns
	fake.recordInvocation("GetGroupUsers", []interface{}{arg1})
	fake.getGroupUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLdapHandler) GetGroupUsersCallCount() int {
	fake.getGroupUsersMutex.RLock()
	defer fake.getGroupUsersMutex.RUnlock()
	return len(fake.getGroupUsersArgsForCall)
}

func (fake *FakeLdapHandler) GetGroupUsersCalls(stub func(database.Group) ([]database.UserGroup, error)) {
	fake.getGroupUsersMutex.Lock()
	defer fake.getGroupUsersMutex.Unlock()
	fake.GetGroupUsersStub = stub
}

func (fake *FakeLdapHandler) GetGroupUsersArgsForCall(i int) database.Group {
	fake.getGroupUsersMutex.RLock()
	defer fake.getGroupUsersMutex.RUnlock()
	argsForCall := fake.getGroupUsersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLdapHandler) GetGroupUsersReturns(result1 []database.UserGroup, result2 error) {
	fake.getGroupUsersMutex.Lock()
	defer fake.getGroupUsersMutex.Unlock()
	fake.GetGroupUsersStub = nil
	fake.getGroupUsersReturns = struct {
		result1 []database.UserGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetGroupUsersReturnsOnCall(i int, result1 []database.UserGroup, result2 error) {
	fake.getGroupUsersMutex.Lock()
	defer fake.getGroupUsersMutex.Unlock()
	fake.GetGroupUsersStub = nil
	if fake.getGroupUsersReturnsOnCall == nil {
		fake.getGroupUsersReturnsOnCall = make(map[int]struct {
			result1 []database.UserGroup
			result2 error
		})
	}
	fake.getGroupUsersReturnsOnCall[i] = struct {
		result1 []database.UserGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetGroups() ([]database.Group, error) {
	fake.getGroupsMutex.Lock()
	ret, specificReturn := fake.getGroupsReturnsOnCall[len(fake.getGroupsArgsForCall)]
	fake.getGroupsArgsForCall = append(fake.getGroupsArgsForCall, struct {
	}{})
	stub := fake.GetGroupsStub
	fakeReturns := fake.getGroupsReturns
	fake.recordInvocation("GetGroups", []interface{}{})
	fake.getGroupsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLdapHandler) GetGroupsCallCount() int {
	fake.getGroupsMutex.RLock()
	defer fake.getGroupsMutex.RUnlock()
	return len(fake.getGroupsArgsForCall)
}

func (fake *FakeLdapHandler) GetGroupsCalls(stub func() ([]database.Group, error)) {
	fake.getGroupsMutex.Lock()
	defer fake.getGroupsMutex.Unlock()
	fake.GetGroupsStub = stub
}

func (fake *FakeLdapHandler) GetGroupsReturns(result1 []database.Group, result2 error) {
	fake.getGroupsMutex.Lock()
	defer fake.getGroupsMutex.Unlock()
	fake.GetGroupsStub = nil
	fake.getGroupsReturns = struct {
		result1 []database.Group
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetGroupsReturnsOnCall(i int, result1 []database.Group, result2 error) {
	fake.getGroupsMutex.Lock()
	defer fake.getGroupsMutex.Unlock()
	fake.GetGroupsStub = nil
	if fake.getGroupsReturnsOnCall == nil {
		fake.getGroupsReturnsOnCall = make(map[int]struct {
			result1 []database.Group
			result2 error
		})
	}
	fake.getGroupsReturnsOnCall[i] = struct {
		result1 []database.Group
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetUser(arg1 string) (database.User, error) {
	fake.getUserMutex.Lock()
	ret, specificReturn := fake.getUserReturnsOnCall[len(fake.getUserArgsForCall)]
	fake.getUserArgsForCall = append(fake.getUserArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUserStub
	fakeReturns := fake.getUserReturns
	fake.recordInvocation("GetUser", []interface{}{arg1})
	fake.getUserMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLdapHandler) GetUserCallCount() int {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	return len(fake.getUserArgsForCall)
}

func (fake *FakeLdapHandler) GetUserCalls(stub func(string) (database.User, error)) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = stub
}

func (fake *FakeLdapHandler) GetUserArgsForCall(i int) string {
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	argsForCall := fake.getUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLdapHandler) GetUserReturns(result1 database.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	fake.getUserReturns = struct {
		result1 database.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetUserReturnsOnCall(i int, result1 database.User, result2 error) {
	fake.getUserMutex.Lock()
	defer fake.getUserMutex.Unlock()
	fake.GetUserStub = nil
	if fake.getUserReturnsOnCall == nil {
		fake.getUserReturnsOnCall = make(map[int]struct {
			result1 database.User
			result2 error
		})
	}
	fake.getUserReturnsOnCall[i] = struct {
		result1 database.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetUserByDN(arg1 string) (database.User, error) {
	fake.getUserByDNMutex.Lock()
	ret, specificReturn := fake.getUserByDNReturnsOnCall[len(fake.getUserByDNArgsForCall)]
	fake.getUserByDNArgsForCall = append(fake.getUserByDNArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUserByDNStub
	fakeReturns := fake.getUserByDNReturns
	fake.recordInvocation("GetUserByDN", []interface{}{arg1})
	fake.getUserByDNMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLdapHandler) GetUserByDNCallCount() int {
	fake.getUserByDNMutex.RLock()
	defer fake.getUserByDNMutex.RUnlock()
	return len(fake.getUserByDNArgsForCall)
}

func (fake *FakeLdapHandler) GetUserByDNCalls(stub func(string) (database.User, error)) {
	fake.getUserByDNMutex.Lock()
	defer fake.getUserByDNMutex.Unlock()
	fake.GetUserByDNStub = stub
}

func (fake *FakeLdapHandler) GetUserByDNArgsForCall(i int) string {
	fake.getUserByDNMutex.RLock()
	defer fake.getUserByDNMutex.RUnlock()
	argsForCall := fake.getUserByDNArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLdapHandler) GetUserByDNReturns(result1 database.User, result2 error) {
	fake.getUserByDNMutex.Lock()
	defer fake.getUserByDNMutex.Unlock()
	fake.GetUserByDNStub = nil
	fake.getUserByDNReturns = struct {
		result1 database.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetUserByDNReturnsOnCall(i int, result1 database.User, result2 error) {
	fake.getUserByDNMutex.Lock()
	defer fake.getUserByDNMutex.Unlock()
	fake.GetUserByDNStub = nil
	if fake.getUserByDNReturnsOnCall == nil {
		fake.getUserByDNReturnsOnCall = make(map[int]struct {
			result1 database.User
			result2 error
		})
	}
	fake.getUserByDNReturnsOnCall[i] = struct {
		result1 database.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetUserGroups(arg1 database.User) ([]database.UserGroup, error) {
	fake.getUserGroupsMutex.Lock()
	ret, specificReturn := fake.getUserGroupsReturnsOnCall[len(fake.getUserGroupsArgsForCall)]
	fake.getUserGroupsArgsForCall = append(fake.getUserGroupsArgsForCall, struct {
		arg1 database.User
	}{arg1})
	stub := fake.GetUserGroupsStub
	fakeReturns := fake.getUserGroupsReturns
	fake.recordInvocation("GetUserGroups", []interface{}{arg1})
	fake.getUserGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLdapHandler) GetUserGroupsCallCount() int {
	fake.getUserGroupsMutex.RLock()
	defer fake.getUserGroupsMutex.RUnlock()
	return len(fake.getUserGroupsArgsForCall)
}

func (fake *FakeLdapHandler) GetUserGroupsCalls(stub func(database.User) ([]database.UserGroup, error)) {
	fake.getUserGroupsMutex.Lock()
	defer fake.getUserGroupsMutex.Unlock()
	fake.GetUserGroupsStub = stub
}

func (fake *FakeLdapHandler) GetUserGroupsArgsForCall(i int) database.User {
	fake.getUserGroupsMutex.RLock()
	defer fake.getUserGroupsMutex.RUnlock()
	argsForCall := fake.getUserGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLdapHandler) GetUserGroupsReturns(result1 []database.UserGroup, result2 error) {
	fake.getUserGroupsMutex.Lock()
	defer fake.getUserGroupsMutex.Unlock()
	fake.GetUserGroupsStub = nil
	fake.getUserGroupsReturns = struct {
		result1 []database.UserGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetUserGroupsReturnsOnCall(i int, result1 []database.UserGroup, result2 error) {
	fake.getUserGroupsMutex.Lock()
	defer fake.getUserGroupsMutex.Unlock()
	fake.GetUserGroupsStub = nil
	if fake.getUserGroupsReturnsOnCall == nil {
		fake.getUserGroupsReturnsOnCall = make(map[int]struct {
			result1 []database.UserGroup
			result2 error
		})
	}
	fake.getUserGroupsReturnsOnCall[i] = struct {
		result1 []database.UserGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetUsers() ([]database.User, error) {
	fake.getUsersMutex.Lock()
	ret, specificReturn := fake.getUsersReturnsOnCall[len(fake.getUsersArgsForCall)]
	fake.getUsersArgsForCall = append(fake.getUsersArgsForCall, struct {
	}{})
	stub := fake.GetUsersStub
	fakeReturns := fake.getUsersReturns
	fake.recordInvocation("GetUsers", []interface{}{})
	fake.getUsersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLdapHandler) GetUsersCallCount() int {
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	return len(fake.getUsersArgsForCall)
}

func (fake *FakeLdapHandler) GetUsersCalls(stub func() ([]database.User, error)) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = stub
}

func (fake *FakeLdapHandler) GetUsersReturns(result1 []database.User, result2 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	fake.getUsersReturns = struct {
		result1 []database.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) GetUsersReturnsOnCall(i int, result1 []database.User, result2 error) {
	fake.getUsersMutex.Lock()
	defer fake.getUsersMutex.Unlock()
	fake.GetUsersStub = nil
	if fake.getUsersReturnsOnCall == nil {
		fake.getUsersReturnsOnCall = make(map[int]struct {
			result1 []database.User
			result2 error
		})
	}
	fake.getUsersReturnsOnCall[i] = struct {
		result1 []database.User
		result2 error
	}{result1, result2}
}

func (fake *FakeLdapHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authUserMutex.RLock()
	defer fake.authUserMutex.RUnlock()
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	fake.getGroupUsersMutex.RLock()
	defer fake.getGroupUsersMutex.RUnlock()
	fake.getGroupsMutex.RLock()
	defer fake.getGroupsMutex.RUnlock()
	fake.getUserMutex.RLock()
	defer fake.getUserMutex.RUnlock()
	fake.getUserByDNMutex.RLock()
	defer fake.getUserByDNMutex.RUnlock()
	fake.getUserGroupsMutex.RLock()
	defer fake.getUserGroupsMutex.RUnlock()
	fake.getUsersMutex.RLock()
	defer fake.getUsersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLdapHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ldap_handler.LdapHandler = new(FakeLdapHandler)
