// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	database "github.com/mwinters-stuff/noodle/noodle/database"

	mock "github.com/stretchr/testify/mock"
)

// LdapHandler is an autogenerated mock type for the LdapHandler type
type LdapHandler struct {
	mock.Mock
}

// AuthUser provides a mock function with given fields: userdn, password
func (_m *LdapHandler) AuthUser(userdn string, password string) (bool, error) {
	ret := _m.Called(userdn, password)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userdn, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userdn, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connect provides a mock function with given fields:
func (_m *LdapHandler) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupUsers provides a mock function with given fields: _a0
func (_m *LdapHandler) GetGroupUsers(_a0 database.Group) ([]database.UserGroup, error) {
	ret := _m.Called(_a0)

	var r0 []database.UserGroup
	if rf, ok := ret.Get(0).(func(database.Group) []database.UserGroup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.UserGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.Group) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroups provides a mock function with given fields:
func (_m *LdapHandler) GetGroups() ([]database.Group, error) {
	ret := _m.Called()

	var r0 []database.Group
	if rf, ok := ret.Get(0).(func() []database.Group); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Group)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: username
func (_m *LdapHandler) GetUser(username string) (database.User, error) {
	ret := _m.Called(username)

	var r0 database.User
	if rf, ok := ret.Get(0).(func(string) database.User); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByDN provides a mock function with given fields: dn
func (_m *LdapHandler) GetUserByDN(dn string) (database.User, error) {
	ret := _m.Called(dn)

	var r0 database.User
	if rf, ok := ret.Get(0).(func(string) database.User); ok {
		r0 = rf(dn)
	} else {
		r0 = ret.Get(0).(database.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroups provides a mock function with given fields: _a0
func (_m *LdapHandler) GetUserGroups(_a0 database.User) ([]database.UserGroup, error) {
	ret := _m.Called(_a0)

	var r0 []database.UserGroup
	if rf, ok := ret.Get(0).(func(database.User) []database.UserGroup); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.UserGroup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(database.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *LdapHandler) GetUsers() ([]database.User, error) {
	ret := _m.Called()

	var r0 []database.User
	if rf, ok := ret.Get(0).(func() []database.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLdapHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewLdapHandler creates a new instance of LdapHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLdapHandler(t mockConstructorTestingTNewLdapHandler) *LdapHandler {
	mock := &LdapHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
