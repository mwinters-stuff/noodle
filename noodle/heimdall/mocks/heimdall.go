// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Heimdall is an autogenerated mock type for the Heimdall type
type Heimdall struct {
	mock.Mock
}

type Heimdall_Expecter struct {
	mock *mock.Mock
}

func (_m *Heimdall) EXPECT() *Heimdall_Expecter {
	return &Heimdall_Expecter{mock: &_m.Mock}
}

// ListIcons provides a mock function with given fields:
func (_m *Heimdall) ListIcons() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Heimdall_ListIcons_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIcons'
type Heimdall_ListIcons_Call struct {
	*mock.Call
}

// ListIcons is a helper method to define mock.On call
func (_e *Heimdall_Expecter) ListIcons() *Heimdall_ListIcons_Call {
	return &Heimdall_ListIcons_Call{Call: _e.mock.On("ListIcons")}
}

func (_c *Heimdall_ListIcons_Call) Run(run func()) *Heimdall_ListIcons_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Heimdall_ListIcons_Call) Return(_a0 []string, _a1 error) *Heimdall_ListIcons_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateFromServer provides a mock function with given fields:
func (_m *Heimdall) UpdateFromServer() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Heimdall_UpdateFromServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFromServer'
type Heimdall_UpdateFromServer_Call struct {
	*mock.Call
}

// UpdateFromServer is a helper method to define mock.On call
func (_e *Heimdall_Expecter) UpdateFromServer() *Heimdall_UpdateFromServer_Call {
	return &Heimdall_UpdateFromServer_Call{Call: _e.mock.On("UpdateFromServer")}
}

func (_c *Heimdall_UpdateFromServer_Call) Run(run func()) *Heimdall_UpdateFromServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Heimdall_UpdateFromServer_Call) Return(_a0 error) *Heimdall_UpdateFromServer_Call {
	_c.Call.Return(_a0)
	return _c
}

// UploadIcon provides a mock function with given fields: filename, data
func (_m *Heimdall) UploadIcon(filename string, data io.ReadCloser) error {
	ret := _m.Called(filename, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.ReadCloser) error); ok {
		r0 = rf(filename, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Heimdall_UploadIcon_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadIcon'
type Heimdall_UploadIcon_Call struct {
	*mock.Call
}

// UploadIcon is a helper method to define mock.On call
//   - filename string
//   - data io.ReadCloser
func (_e *Heimdall_Expecter) UploadIcon(filename interface{}, data interface{}) *Heimdall_UploadIcon_Call {
	return &Heimdall_UploadIcon_Call{Call: _e.mock.On("UploadIcon", filename, data)}
}

func (_c *Heimdall_UploadIcon_Call) Run(run func(filename string, data io.ReadCloser)) *Heimdall_UploadIcon_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(io.ReadCloser))
	})
	return _c
}

func (_c *Heimdall_UploadIcon_Call) Return(_a0 error) *Heimdall_UploadIcon_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewHeimdall interface {
	mock.TestingT
	Cleanup(func())
}

// NewHeimdall creates a new instance of Heimdall. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHeimdall(t mockConstructorTestingTNewHeimdall) *Heimdall {
	mock := &Heimdall{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
