// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mwinters-stuff/noodle/server/models"
	mock "github.com/stretchr/testify/mock"
)

// UserTable is an autogenerated mock type for the UserTable type
type UserTable struct {
	mock.Mock
}

type UserTable_Expecter struct {
	mock *mock.Mock
}

func (_m *UserTable) EXPECT() *UserTable_Expecter {
	return &UserTable_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields:
func (_m *UserTable) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTable_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserTable_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *UserTable_Expecter) Create() *UserTable_Create_Call {
	return &UserTable_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *UserTable_Create_Call) Run(run func()) *UserTable_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserTable_Create_Call) Return(_a0 error) *UserTable_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: user
func (_m *UserTable) Delete(user models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTable_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserTable_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - user models.User
func (_e *UserTable_Expecter) Delete(user interface{}) *UserTable_Delete_Call {
	return &UserTable_Delete_Call{Call: _e.mock.On("Delete", user)}
}

func (_c *UserTable_Delete_Call) Run(run func(user models.User)) *UserTable_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *UserTable_Delete_Call) Return(_a0 error) *UserTable_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Drop provides a mock function with given fields:
func (_m *UserTable) Drop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTable_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type UserTable_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *UserTable_Expecter) Drop() *UserTable_Drop_Call {
	return &UserTable_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *UserTable_Drop_Call) Run(run func()) *UserTable_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserTable_Drop_Call) Return(_a0 error) *UserTable_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

// ExistsDN provides a mock function with given fields: dn
func (_m *UserTable) ExistsDN(dn string) (bool, error) {
	ret := _m.Called(dn)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(dn)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTable_ExistsDN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsDN'
type UserTable_ExistsDN_Call struct {
	*mock.Call
}

// ExistsDN is a helper method to define mock.On call
//   - dn string
func (_e *UserTable_Expecter) ExistsDN(dn interface{}) *UserTable_ExistsDN_Call {
	return &UserTable_ExistsDN_Call{Call: _e.mock.On("ExistsDN", dn)}
}

func (_c *UserTable_ExistsDN_Call) Run(run func(dn string)) *UserTable_ExistsDN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserTable_ExistsDN_Call) Return(_a0 bool, _a1 error) *UserTable_ExistsDN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ExistsUsername provides a mock function with given fields: username
func (_m *UserTable) ExistsUsername(username string) (bool, error) {
	ret := _m.Called(username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTable_ExistsUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistsUsername'
type UserTable_ExistsUsername_Call struct {
	*mock.Call
}

// ExistsUsername is a helper method to define mock.On call
//   - username string
func (_e *UserTable_Expecter) ExistsUsername(username interface{}) *UserTable_ExistsUsername_Call {
	return &UserTable_ExistsUsername_Call{Call: _e.mock.On("ExistsUsername", username)}
}

func (_c *UserTable_ExistsUsername_Call) Run(run func(username string)) *UserTable_ExistsUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserTable_ExistsUsername_Call) Return(_a0 bool, _a1 error) *UserTable_ExistsUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *UserTable) GetAll() ([]*models.User, error) {
	ret := _m.Called()

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func() []*models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTable_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UserTable_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *UserTable_Expecter) GetAll() *UserTable_GetAll_Call {
	return &UserTable_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *UserTable_GetAll_Call) Run(run func()) *UserTable_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserTable_GetAll_Call) Return(_a0 []*models.User, _a1 error) *UserTable_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDN provides a mock function with given fields: dn
func (_m *UserTable) GetDN(dn string) (models.User, error) {
	ret := _m.Called(dn)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(dn)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(dn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTable_GetDN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDN'
type UserTable_GetDN_Call struct {
	*mock.Call
}

// GetDN is a helper method to define mock.On call
//   - dn string
func (_e *UserTable_Expecter) GetDN(dn interface{}) *UserTable_GetDN_Call {
	return &UserTable_GetDN_Call{Call: _e.mock.On("GetDN", dn)}
}

func (_c *UserTable_GetDN_Call) Run(run func(dn string)) *UserTable_GetDN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserTable_GetDN_Call) Return(_a0 models.User, _a1 error) *UserTable_GetDN_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetID provides a mock function with given fields: id
func (_m *UserTable) GetID(id int64) (models.User, error) {
	ret := _m.Called(id)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(int64) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTable_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type UserTable_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
//   - id int64
func (_e *UserTable_Expecter) GetID(id interface{}) *UserTable_GetID_Call {
	return &UserTable_GetID_Call{Call: _e.mock.On("GetID", id)}
}

func (_c *UserTable_GetID_Call) Run(run func(id int64)) *UserTable_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *UserTable_GetID_Call) Return(_a0 models.User, _a1 error) *UserTable_GetID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: user
func (_m *UserTable) Insert(user *models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTable_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type UserTable_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - user *models.User
func (_e *UserTable_Expecter) Insert(user interface{}) *UserTable_Insert_Call {
	return &UserTable_Insert_Call{Call: _e.mock.On("Insert", user)}
}

func (_c *UserTable_Insert_Call) Run(run func(user *models.User)) *UserTable_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserTable_Insert_Call) Return(_a0 error) *UserTable_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

// Update provides a mock function with given fields: user
func (_m *UserTable) Update(user models.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTable_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserTable_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - user models.User
func (_e *UserTable_Expecter) Update(user interface{}) *UserTable_Update_Call {
	return &UserTable_Update_Call{Call: _e.mock.On("Update", user)}
}

func (_c *UserTable_Update_Call) Run(run func(user models.User)) *UserTable_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *UserTable_Update_Call) Return(_a0 error) *UserTable_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

// Upgrade provides a mock function with given fields: old_version, new_verison
func (_m *UserTable) Upgrade(old_version int, new_verison int) error {
	ret := _m.Called(old_version, new_verison)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(old_version, new_verison)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTable_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type UserTable_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - old_version int
//   - new_verison int
func (_e *UserTable_Expecter) Upgrade(old_version interface{}, new_verison interface{}) *UserTable_Upgrade_Call {
	return &UserTable_Upgrade_Call{Call: _e.mock.On("Upgrade", old_version, new_verison)}
}

func (_c *UserTable_Upgrade_Call) Run(run func(old_version int, new_verison int)) *UserTable_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *UserTable_Upgrade_Call) Return(_a0 error) *UserTable_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUserTable interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserTable creates a new instance of UserTable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserTable(t mockConstructorTestingTNewUserTable) *UserTable {
	mock := &UserTable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
