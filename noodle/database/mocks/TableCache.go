// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	database "github.com/mwinters-stuff/noodle/noodle/database"
	mock "github.com/stretchr/testify/mock"
)

// TableCache is an autogenerated mock type for the TableCache type
type TableCache[V database.Cacheable] struct {
	mock.Mock
}

type TableCache_Expecter[V database.Cacheable] struct {
	mock *mock.Mock
}

func (_m *TableCache[V]) EXPECT() *TableCache_Expecter[V] {
	return &TableCache_Expecter[V]{mock: &_m.Mock}
}

// Add provides a mock function with given fields: index, value
func (_m *TableCache[V]) Add(index int64, value V) {
	_m.Called(index, value)
}

// TableCache_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type TableCache_Add_Call[V database.Cacheable] struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - index int64
//   - value V
func (_e *TableCache_Expecter[V]) Add(index interface{}, value interface{}) *TableCache_Add_Call[V] {
	return &TableCache_Add_Call[V]{Call: _e.mock.On("Add", index, value)}
}

func (_c *TableCache_Add_Call[V]) Run(run func(index int64, value V)) *TableCache_Add_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(V))
	})
	return _c
}

func (_c *TableCache_Add_Call[V]) Return() *TableCache_Add_Call[V] {
	_c.Call.Return()
	return _c
}

// DeleteIndex provides a mock function with given fields: index
func (_m *TableCache[V]) DeleteIndex(index int64) {
	_m.Called(index)
}

// TableCache_DeleteIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIndex'
type TableCache_DeleteIndex_Call[V database.Cacheable] struct {
	*mock.Call
}

// DeleteIndex is a helper method to define mock.On call
//   - index int64
func (_e *TableCache_Expecter[V]) DeleteIndex(index interface{}) *TableCache_DeleteIndex_Call[V] {
	return &TableCache_DeleteIndex_Call[V]{Call: _e.mock.On("DeleteIndex", index)}
}

func (_c *TableCache_DeleteIndex_Call[V]) Run(run func(index int64)) *TableCache_DeleteIndex_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *TableCache_DeleteIndex_Call[V]) Return() *TableCache_DeleteIndex_Call[V] {
	_c.Call.Return()
	return _c
}

// DeleteValue provides a mock function with given fields: value
func (_m *TableCache[V]) DeleteValue(value V) {
	_m.Called(value)
}

// TableCache_DeleteValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteValue'
type TableCache_DeleteValue_Call[V database.Cacheable] struct {
	*mock.Call
}

// DeleteValue is a helper method to define mock.On call
//   - value V
func (_e *TableCache_Expecter[V]) DeleteValue(value interface{}) *TableCache_DeleteValue_Call[V] {
	return &TableCache_DeleteValue_Call[V]{Call: _e.mock.On("DeleteValue", value)}
}

func (_c *TableCache_DeleteValue_Call[V]) Run(run func(value V)) *TableCache_DeleteValue_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(V))
	})
	return _c
}

func (_c *TableCache_DeleteValue_Call[V]) Return() *TableCache_DeleteValue_Call[V] {
	_c.Call.Return()
	return _c
}

// Find provides a mock function with given fields: f
func (_m *TableCache[V]) Find(f func(int64, V) bool) (bool, *V) {
	ret := _m.Called(f)

	var r0 bool
	if rf, ok := ret.Get(0).(func(func(int64, V) bool) bool); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *V
	if rf, ok := ret.Get(1).(func(func(int64, V) bool) *V); ok {
		r1 = rf(f)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*V)
		}
	}

	return r0, r1
}

// TableCache_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type TableCache_Find_Call[V database.Cacheable] struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - f func(int64 , V) bool
func (_e *TableCache_Expecter[V]) Find(f interface{}) *TableCache_Find_Call[V] {
	return &TableCache_Find_Call[V]{Call: _e.mock.On("Find", f)}
}

func (_c *TableCache_Find_Call[V]) Run(run func(f func(int64, V) bool)) *TableCache_Find_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(int64, V) bool))
	})
	return _c
}

func (_c *TableCache_Find_Call[V]) Return(_a0 bool, _a1 *V) *TableCache_Find_Call[V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindAll provides a mock function with given fields: f
func (_m *TableCache[V]) FindAll(f func(int64, V) bool) (bool, []V) {
	ret := _m.Called(f)

	var r0 bool
	if rf, ok := ret.Get(0).(func(func(int64, V) bool) bool); ok {
		r0 = rf(f)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 []V
	if rf, ok := ret.Get(1).(func(func(int64, V) bool) []V); ok {
		r1 = rf(f)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]V)
		}
	}

	return r0, r1
}

// TableCache_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type TableCache_FindAll_Call[V database.Cacheable] struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - f func(int64 , V) bool
func (_e *TableCache_Expecter[V]) FindAll(f interface{}) *TableCache_FindAll_Call[V] {
	return &TableCache_FindAll_Call[V]{Call: _e.mock.On("FindAll", f)}
}

func (_c *TableCache_FindAll_Call[V]) Run(run func(f func(int64, V) bool)) *TableCache_FindAll_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(int64, V) bool))
	})
	return _c
}

func (_c *TableCache_FindAll_Call[V]) Return(_a0 bool, _a1 []V) *TableCache_FindAll_Call[V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ForEach provides a mock function with given fields: f
func (_m *TableCache[V]) ForEach(f func(int64, V) bool) {
	_m.Called(f)
}

// TableCache_ForEach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForEach'
type TableCache_ForEach_Call[V database.Cacheable] struct {
	*mock.Call
}

// ForEach is a helper method to define mock.On call
//   - f func(int64 , V) bool
func (_e *TableCache_Expecter[V]) ForEach(f interface{}) *TableCache_ForEach_Call[V] {
	return &TableCache_ForEach_Call[V]{Call: _e.mock.On("ForEach", f)}
}

func (_c *TableCache_ForEach_Call[V]) Run(run func(f func(int64, V) bool)) *TableCache_ForEach_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(int64, V) bool))
	})
	return _c
}

func (_c *TableCache_ForEach_Call[V]) Return() *TableCache_ForEach_Call[V] {
	_c.Call.Return()
	return _c
}

// GetID provides a mock function with given fields: index
func (_m *TableCache[V]) GetID(index int64) (bool, V) {
	ret := _m.Called(index)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64) bool); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 V
	if rf, ok := ret.Get(1).(func(int64) V); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Get(1).(V)
	}

	return r0, r1
}

// TableCache_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type TableCache_GetID_Call[V database.Cacheable] struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
//   - index int64
func (_e *TableCache_Expecter[V]) GetID(index interface{}) *TableCache_GetID_Call[V] {
	return &TableCache_GetID_Call[V]{Call: _e.mock.On("GetID", index)}
}

func (_c *TableCache_GetID_Call[V]) Run(run func(index int64)) *TableCache_GetID_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *TableCache_GetID_Call[V]) Return(_a0 bool, _a1 V) *TableCache_GetID_Call[V] {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: index, value
func (_m *TableCache[V]) Update(index int64, value V) {
	_m.Called(index, value)
}

// TableCache_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TableCache_Update_Call[V database.Cacheable] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - index int64
//   - value V
func (_e *TableCache_Expecter[V]) Update(index interface{}, value interface{}) *TableCache_Update_Call[V] {
	return &TableCache_Update_Call[V]{Call: _e.mock.On("Update", index, value)}
}

func (_c *TableCache_Update_Call[V]) Run(run func(index int64, value V)) *TableCache_Update_Call[V] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(V))
	})
	return _c
}

func (_c *TableCache_Update_Call[V]) Return() *TableCache_Update_Call[V] {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewTableCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewTableCache creates a new instance of TableCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTableCache[V database.Cacheable](t mockConstructorTestingTNewTableCache) *TableCache[V] {
	mock := &TableCache[V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
