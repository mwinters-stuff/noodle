// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mwinters-stuff/noodle/server/models"
	mock "github.com/stretchr/testify/mock"
)

// AppTemplateTable is an autogenerated mock type for the AppTemplateTable type
type AppTemplateTable struct {
	mock.Mock
}

type AppTemplateTable_Expecter struct {
	mock *mock.Mock
}

func (_m *AppTemplateTable) EXPECT() *AppTemplateTable_Expecter {
	return &AppTemplateTable_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields:
func (_m *AppTemplateTable) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppTemplateTable_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AppTemplateTable_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *AppTemplateTable_Expecter) Create() *AppTemplateTable_Create_Call {
	return &AppTemplateTable_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *AppTemplateTable_Create_Call) Run(run func()) *AppTemplateTable_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AppTemplateTable_Create_Call) Return(_a0 error) *AppTemplateTable_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: app
func (_m *AppTemplateTable) Delete(app models.ApplicationTemplate) error {
	ret := _m.Called(app)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ApplicationTemplate) error); ok {
		r0 = rf(app)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppTemplateTable_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AppTemplateTable_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - app models.ApplicationTemplate
func (_e *AppTemplateTable_Expecter) Delete(app interface{}) *AppTemplateTable_Delete_Call {
	return &AppTemplateTable_Delete_Call{Call: _e.mock.On("Delete", app)}
}

func (_c *AppTemplateTable_Delete_Call) Run(run func(app models.ApplicationTemplate)) *AppTemplateTable_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ApplicationTemplate))
	})
	return _c
}

func (_c *AppTemplateTable_Delete_Call) Return(_a0 error) *AppTemplateTable_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Drop provides a mock function with given fields:
func (_m *AppTemplateTable) Drop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppTemplateTable_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type AppTemplateTable_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *AppTemplateTable_Expecter) Drop() *AppTemplateTable_Drop_Call {
	return &AppTemplateTable_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *AppTemplateTable_Drop_Call) Run(run func()) *AppTemplateTable_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AppTemplateTable_Drop_Call) Return(_a0 error) *AppTemplateTable_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

// Exists provides a mock function with given fields: appid
func (_m *AppTemplateTable) Exists(appid string) (bool, error) {
	ret := _m.Called(appid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(appid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppTemplateTable_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type AppTemplateTable_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - appid string
func (_e *AppTemplateTable_Expecter) Exists(appid interface{}) *AppTemplateTable_Exists_Call {
	return &AppTemplateTable_Exists_Call{Call: _e.mock.On("Exists", appid)}
}

func (_c *AppTemplateTable_Exists_Call) Run(run func(appid string)) *AppTemplateTable_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AppTemplateTable_Exists_Call) Return(_a0 bool, _a1 error) *AppTemplateTable_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: app
func (_m *AppTemplateTable) Insert(app models.ApplicationTemplate) error {
	ret := _m.Called(app)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ApplicationTemplate) error); ok {
		r0 = rf(app)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppTemplateTable_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type AppTemplateTable_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - app models.ApplicationTemplate
func (_e *AppTemplateTable_Expecter) Insert(app interface{}) *AppTemplateTable_Insert_Call {
	return &AppTemplateTable_Insert_Call{Call: _e.mock.On("Insert", app)}
}

func (_c *AppTemplateTable_Insert_Call) Run(run func(app models.ApplicationTemplate)) *AppTemplateTable_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ApplicationTemplate))
	})
	return _c
}

func (_c *AppTemplateTable_Insert_Call) Return(_a0 error) *AppTemplateTable_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

// Search provides a mock function with given fields: search
func (_m *AppTemplateTable) Search(search string) ([]*models.ApplicationTemplate, error) {
	ret := _m.Called(search)

	var r0 []*models.ApplicationTemplate
	if rf, ok := ret.Get(0).(func(string) []*models.ApplicationTemplate); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ApplicationTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(search)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AppTemplateTable_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type AppTemplateTable_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - search string
func (_e *AppTemplateTable_Expecter) Search(search interface{}) *AppTemplateTable_Search_Call {
	return &AppTemplateTable_Search_Call{Call: _e.mock.On("Search", search)}
}

func (_c *AppTemplateTable_Search_Call) Run(run func(search string)) *AppTemplateTable_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AppTemplateTable_Search_Call) Return(_a0 []*models.ApplicationTemplate, _a1 error) *AppTemplateTable_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Update provides a mock function with given fields: app
func (_m *AppTemplateTable) Update(app models.ApplicationTemplate) error {
	ret := _m.Called(app)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ApplicationTemplate) error); ok {
		r0 = rf(app)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppTemplateTable_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AppTemplateTable_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - app models.ApplicationTemplate
func (_e *AppTemplateTable_Expecter) Update(app interface{}) *AppTemplateTable_Update_Call {
	return &AppTemplateTable_Update_Call{Call: _e.mock.On("Update", app)}
}

func (_c *AppTemplateTable_Update_Call) Run(run func(app models.ApplicationTemplate)) *AppTemplateTable_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ApplicationTemplate))
	})
	return _c
}

func (_c *AppTemplateTable_Update_Call) Return(_a0 error) *AppTemplateTable_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

// Upgrade provides a mock function with given fields: old_version, new_verison
func (_m *AppTemplateTable) Upgrade(old_version int, new_verison int) error {
	ret := _m.Called(old_version, new_verison)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(old_version, new_verison)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AppTemplateTable_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type AppTemplateTable_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - old_version int
//   - new_verison int
func (_e *AppTemplateTable_Expecter) Upgrade(old_version interface{}, new_verison interface{}) *AppTemplateTable_Upgrade_Call {
	return &AppTemplateTable_Upgrade_Call{Call: _e.mock.On("Upgrade", old_version, new_verison)}
}

func (_c *AppTemplateTable_Upgrade_Call) Run(run func(old_version int, new_verison int)) *AppTemplateTable_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *AppTemplateTable_Upgrade_Call) Return(_a0 error) *AppTemplateTable_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAppTemplateTable interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppTemplateTable creates a new instance of AppTemplateTable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppTemplateTable(t mockConstructorTestingTNewAppTemplateTable) *AppTemplateTable {
	mock := &AppTemplateTable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
