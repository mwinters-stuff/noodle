// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	database "github.com/mwinters-stuff/noodle/noodle/database"
	mock "github.com/stretchr/testify/mock"

	pgxpool "github.com/jackc/pgx/v5/pgxpool"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// CheckCreated provides a mock function with given fields:
func (_m *Database) CheckCreated() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CheckCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckCreated'
type Database_CheckCreated_Call struct {
	*mock.Call
}

// CheckCreated is a helper method to define mock.On call
func (_e *Database_Expecter) CheckCreated() *Database_CheckCreated_Call {
	return &Database_CheckCreated_Call{Call: _e.mock.On("CheckCreated")}
}

func (_c *Database_CheckCreated_Call) Run(run func()) *Database_CheckCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_CheckCreated_Call) Return(_a0 bool, _a1 error) *Database_CheckCreated_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CheckUpgrade provides a mock function with given fields:
func (_m *Database) CheckUpgrade() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_CheckUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUpgrade'
type Database_CheckUpgrade_Call struct {
	*mock.Call
}

// CheckUpgrade is a helper method to define mock.On call
func (_e *Database_Expecter) CheckUpgrade() *Database_CheckUpgrade_Call {
	return &Database_CheckUpgrade_Call{Call: _e.mock.On("CheckUpgrade")}
}

func (_c *Database_CheckUpgrade_Call) Run(run func()) *Database_CheckUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_CheckUpgrade_Call) Return(_a0 bool, _a1 error) *Database_CheckUpgrade_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Close provides a mock function with given fields:
func (_m *Database) Close() {
	_m.Called()
}

// Database_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Database_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Database_Expecter) Close() *Database_Close_Call {
	return &Database_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Database_Close_Call) Run(run func()) *Database_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Close_Call) Return() *Database_Close_Call {
	_c.Call.Return()
	return _c
}

// Connect provides a mock function with given fields:
func (_m *Database) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Database_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *Database_Expecter) Connect() *Database_Connect_Call {
	return &Database_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *Database_Connect_Call) Run(run func()) *Database_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Connect_Call) Return(_a0 error) *Database_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

// Create provides a mock function with given fields:
func (_m *Database) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Database_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *Database_Expecter) Create() *Database_Create_Call {
	return &Database_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *Database_Create_Call) Run(run func()) *Database_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Create_Call) Return(_a0 error) *Database_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Drop provides a mock function with given fields:
func (_m *Database) Drop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type Database_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *Database_Expecter) Drop() *Database_Drop_Call {
	return &Database_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *Database_Drop_Call) Run(run func()) *Database_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Drop_Call) Return(_a0 error) *Database_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetVersion provides a mock function with given fields:
func (_m *Database) GetVersion() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Database_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type Database_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
func (_e *Database_Expecter) GetVersion() *Database_GetVersion_Call {
	return &Database_GetVersion_Call{Call: _e.mock.On("GetVersion")}
}

func (_c *Database_GetVersion_Call) Run(run func()) *Database_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_GetVersion_Call) Return(_a0 int, _a1 error) *Database_GetVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Pool provides a mock function with given fields:
func (_m *Database) Pool() *pgxpool.Pool {
	ret := _m.Called()

	var r0 *pgxpool.Pool
	if rf, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}

	return r0
}

// Database_Pool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pool'
type Database_Pool_Call struct {
	*mock.Call
}

// Pool is a helper method to define mock.On call
func (_e *Database_Expecter) Pool() *Database_Pool_Call {
	return &Database_Pool_Call{Call: _e.mock.On("Pool")}
}

func (_c *Database_Pool_Call) Run(run func()) *Database_Pool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Pool_Call) Return(_a0 *pgxpool.Pool) *Database_Pool_Call {
	_c.Call.Return(_a0)
	return _c
}

// Tables provides a mock function with given fields:
func (_m *Database) Tables() database.Tables {
	ret := _m.Called()

	var r0 database.Tables
	if rf, ok := ret.Get(0).(func() database.Tables); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Tables)
		}
	}

	return r0
}

// Database_Tables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tables'
type Database_Tables_Call struct {
	*mock.Call
}

// Tables is a helper method to define mock.On call
func (_e *Database_Expecter) Tables() *Database_Tables_Call {
	return &Database_Tables_Call{Call: _e.mock.On("Tables")}
}

func (_c *Database_Tables_Call) Run(run func()) *Database_Tables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Tables_Call) Return(_a0 database.Tables) *Database_Tables_Call {
	_c.Call.Return(_a0)
	return _c
}

// Upgrade provides a mock function with given fields:
func (_m *Database) Upgrade() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type Database_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
func (_e *Database_Expecter) Upgrade() *Database_Upgrade_Call {
	return &Database_Upgrade_Call{Call: _e.mock.On("Upgrade")}
}

func (_c *Database_Upgrade_Call) Run(run func()) *Database_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Upgrade_Call) Return(_a0 error) *Database_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
