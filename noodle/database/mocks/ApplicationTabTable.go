// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mwinters-stuff/noodle/server/models"
	mock "github.com/stretchr/testify/mock"
)

// ApplicationTabTable is an autogenerated mock type for the ApplicationTabTable type
type ApplicationTabTable struct {
	mock.Mock
}

type ApplicationTabTable_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationTabTable) EXPECT() *ApplicationTabTable_Expecter {
	return &ApplicationTabTable_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields:
func (_m *ApplicationTabTable) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationTabTable_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ApplicationTabTable_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *ApplicationTabTable_Expecter) Create() *ApplicationTabTable_Create_Call {
	return &ApplicationTabTable_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *ApplicationTabTable_Create_Call) Run(run func()) *ApplicationTabTable_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ApplicationTabTable_Create_Call) Return(_a0 error) *ApplicationTabTable_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: tab
func (_m *ApplicationTabTable) Delete(tab models.ApplicationTab) error {
	ret := _m.Called(tab)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ApplicationTab) error); ok {
		r0 = rf(tab)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationTabTable_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ApplicationTabTable_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - tab models.ApplicationTab
func (_e *ApplicationTabTable_Expecter) Delete(tab interface{}) *ApplicationTabTable_Delete_Call {
	return &ApplicationTabTable_Delete_Call{Call: _e.mock.On("Delete", tab)}
}

func (_c *ApplicationTabTable_Delete_Call) Run(run func(tab models.ApplicationTab)) *ApplicationTabTable_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ApplicationTab))
	})
	return _c
}

func (_c *ApplicationTabTable_Delete_Call) Return(_a0 error) *ApplicationTabTable_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Drop provides a mock function with given fields:
func (_m *ApplicationTabTable) Drop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationTabTable_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type ApplicationTabTable_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *ApplicationTabTable_Expecter) Drop() *ApplicationTabTable_Drop_Call {
	return &ApplicationTabTable_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *ApplicationTabTable_Drop_Call) Run(run func()) *ApplicationTabTable_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ApplicationTabTable_Drop_Call) Return(_a0 error) *ApplicationTabTable_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetTabApps provides a mock function with given fields: tabid
func (_m *ApplicationTabTable) GetTabApps(tabid int64) ([]models.ApplicationTab, error) {
	ret := _m.Called(tabid)

	var r0 []models.ApplicationTab
	if rf, ok := ret.Get(0).(func(int64) []models.ApplicationTab); ok {
		r0 = rf(tabid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ApplicationTab)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(tabid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicationTabTable_GetTabApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTabApps'
type ApplicationTabTable_GetTabApps_Call struct {
	*mock.Call
}

// GetTabApps is a helper method to define mock.On call
//   - tabid int64
func (_e *ApplicationTabTable_Expecter) GetTabApps(tabid interface{}) *ApplicationTabTable_GetTabApps_Call {
	return &ApplicationTabTable_GetTabApps_Call{Call: _e.mock.On("GetTabApps", tabid)}
}

func (_c *ApplicationTabTable_GetTabApps_Call) Run(run func(tabid int64)) *ApplicationTabTable_GetTabApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *ApplicationTabTable_GetTabApps_Call) Return(_a0 []models.ApplicationTab, _a1 error) *ApplicationTabTable_GetTabApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: tab
func (_m *ApplicationTabTable) Insert(tab *models.ApplicationTab) error {
	ret := _m.Called(tab)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ApplicationTab) error); ok {
		r0 = rf(tab)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationTabTable_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type ApplicationTabTable_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - tab *models.ApplicationTab
func (_e *ApplicationTabTable_Expecter) Insert(tab interface{}) *ApplicationTabTable_Insert_Call {
	return &ApplicationTabTable_Insert_Call{Call: _e.mock.On("Insert", tab)}
}

func (_c *ApplicationTabTable_Insert_Call) Run(run func(tab *models.ApplicationTab)) *ApplicationTabTable_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.ApplicationTab))
	})
	return _c
}

func (_c *ApplicationTabTable_Insert_Call) Return(_a0 error) *ApplicationTabTable_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

// Update provides a mock function with given fields: tab
func (_m *ApplicationTabTable) Update(tab models.ApplicationTab) error {
	ret := _m.Called(tab)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.ApplicationTab) error); ok {
		r0 = rf(tab)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationTabTable_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ApplicationTabTable_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tab models.ApplicationTab
func (_e *ApplicationTabTable_Expecter) Update(tab interface{}) *ApplicationTabTable_Update_Call {
	return &ApplicationTabTable_Update_Call{Call: _e.mock.On("Update", tab)}
}

func (_c *ApplicationTabTable_Update_Call) Run(run func(tab models.ApplicationTab)) *ApplicationTabTable_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ApplicationTab))
	})
	return _c
}

func (_c *ApplicationTabTable_Update_Call) Return(_a0 error) *ApplicationTabTable_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

// Upgrade provides a mock function with given fields: old_version, new_verison
func (_m *ApplicationTabTable) Upgrade(old_version int, new_verison int) error {
	ret := _m.Called(old_version, new_verison)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(old_version, new_verison)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ApplicationTabTable_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type ApplicationTabTable_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - old_version int
//   - new_verison int
func (_e *ApplicationTabTable_Expecter) Upgrade(old_version interface{}, new_verison interface{}) *ApplicationTabTable_Upgrade_Call {
	return &ApplicationTabTable_Upgrade_Call{Call: _e.mock.On("Upgrade", old_version, new_verison)}
}

func (_c *ApplicationTabTable_Upgrade_Call) Run(run func(old_version int, new_verison int)) *ApplicationTabTable_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *ApplicationTabTable_Upgrade_Call) Return(_a0 error) *ApplicationTabTable_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewApplicationTabTable interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplicationTabTable creates a new instance of ApplicationTabTable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplicationTabTable(t mockConstructorTestingTNewApplicationTabTable) *ApplicationTabTable {
	mock := &ApplicationTabTable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
