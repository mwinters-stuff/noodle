// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mwinters-stuff/noodle/server/models"
	mock "github.com/stretchr/testify/mock"
)

// UserSessionTable is an autogenerated mock type for the UserSessionTable type
type UserSessionTable struct {
	mock.Mock
}

type UserSessionTable_Expecter struct {
	mock *mock.Mock
}

func (_m *UserSessionTable) EXPECT() *UserSessionTable_Expecter {
	return &UserSessionTable_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields:
func (_m *UserSessionTable) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionTable_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserSessionTable_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *UserSessionTable_Expecter) Create() *UserSessionTable_Create_Call {
	return &UserSessionTable_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *UserSessionTable_Create_Call) Run(run func()) *UserSessionTable_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserSessionTable_Create_Call) Return(_a0 error) *UserSessionTable_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *UserSessionTable) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionTable_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserSessionTable_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int64
func (_e *UserSessionTable_Expecter) Delete(id interface{}) *UserSessionTable_Delete_Call {
	return &UserSessionTable_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *UserSessionTable_Delete_Call) Run(run func(id int64)) *UserSessionTable_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *UserSessionTable_Delete_Call) Return(_a0 error) *UserSessionTable_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteExpired provides a mock function with given fields:
func (_m *UserSessionTable) DeleteExpired() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionTable_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type UserSessionTable_DeleteExpired_Call struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
func (_e *UserSessionTable_Expecter) DeleteExpired() *UserSessionTable_DeleteExpired_Call {
	return &UserSessionTable_DeleteExpired_Call{Call: _e.mock.On("DeleteExpired")}
}

func (_c *UserSessionTable_DeleteExpired_Call) Run(run func()) *UserSessionTable_DeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserSessionTable_DeleteExpired_Call) Return(_a0 error) *UserSessionTable_DeleteExpired_Call {
	_c.Call.Return(_a0)
	return _c
}

// Drop provides a mock function with given fields:
func (_m *UserSessionTable) Drop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionTable_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type UserSessionTable_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *UserSessionTable_Expecter) Drop() *UserSessionTable_Drop_Call {
	return &UserSessionTable_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *UserSessionTable_Drop_Call) Run(run func()) *UserSessionTable_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserSessionTable_Drop_Call) Return(_a0 error) *UserSessionTable_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetToken provides a mock function with given fields: token
func (_m *UserSessionTable) GetToken(token string) (models.UserSession, error) {
	ret := _m.Called(token)

	var r0 models.UserSession
	if rf, ok := ret.Get(0).(func(string) models.UserSession); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(models.UserSession)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserSessionTable_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type UserSessionTable_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
//   - token string
func (_e *UserSessionTable_Expecter) GetToken(token interface{}) *UserSessionTable_GetToken_Call {
	return &UserSessionTable_GetToken_Call{Call: _e.mock.On("GetToken", token)}
}

func (_c *UserSessionTable_GetToken_Call) Run(run func(token string)) *UserSessionTable_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserSessionTable_GetToken_Call) Return(_a0 models.UserSession, _a1 error) *UserSessionTable_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUser provides a mock function with given fields: user_id
func (_m *UserSessionTable) GetUser(user_id int64) ([]*models.UserSession, error) {
	ret := _m.Called(user_id)

	var r0 []*models.UserSession
	if rf, ok := ret.Get(0).(func(int64) []*models.UserSession); ok {
		r0 = rf(user_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.UserSession)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserSessionTable_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserSessionTable_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - user_id int64
func (_e *UserSessionTable_Expecter) GetUser(user_id interface{}) *UserSessionTable_GetUser_Call {
	return &UserSessionTable_GetUser_Call{Call: _e.mock.On("GetUser", user_id)}
}

func (_c *UserSessionTable_GetUser_Call) Run(run func(user_id int64)) *UserSessionTable_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *UserSessionTable_GetUser_Call) Return(_a0 []*models.UserSession, _a1 error) *UserSessionTable_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: UserSession
func (_m *UserSessionTable) Insert(UserSession *models.UserSession) error {
	ret := _m.Called(UserSession)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.UserSession) error); ok {
		r0 = rf(UserSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionTable_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type UserSessionTable_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - UserSession *models.UserSession
func (_e *UserSessionTable_Expecter) Insert(UserSession interface{}) *UserSessionTable_Insert_Call {
	return &UserSessionTable_Insert_Call{Call: _e.mock.On("Insert", UserSession)}
}

func (_c *UserSessionTable_Insert_Call) Run(run func(UserSession *models.UserSession)) *UserSessionTable_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.UserSession))
	})
	return _c
}

func (_c *UserSessionTable_Insert_Call) Return(_a0 error) *UserSessionTable_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

// Upgrade provides a mock function with given fields: old_version, new_verison
func (_m *UserSessionTable) Upgrade(old_version int, new_verison int) error {
	ret := _m.Called(old_version, new_verison)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(old_version, new_verison)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionTable_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type UserSessionTable_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - old_version int
//   - new_verison int
func (_e *UserSessionTable_Expecter) Upgrade(old_version interface{}, new_verison interface{}) *UserSessionTable_Upgrade_Call {
	return &UserSessionTable_Upgrade_Call{Call: _e.mock.On("Upgrade", old_version, new_verison)}
}

func (_c *UserSessionTable_Upgrade_Call) Run(run func(old_version int, new_verison int)) *UserSessionTable_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *UserSessionTable_Upgrade_Call) Return(_a0 error) *UserSessionTable_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUserSessionTable interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserSessionTable creates a new instance of UserSessionTable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserSessionTable(t mockConstructorTestingTNewUserSessionTable) *UserSessionTable {
	mock := &UserSessionTable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
