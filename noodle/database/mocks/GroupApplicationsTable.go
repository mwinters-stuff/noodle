// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mwinters-stuff/noodle/server/models"
	mock "github.com/stretchr/testify/mock"
)

// GroupApplicationsTable is an autogenerated mock type for the GroupApplicationsTable type
type GroupApplicationsTable struct {
	mock.Mock
}

type GroupApplicationsTable_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupApplicationsTable) EXPECT() *GroupApplicationsTable_Expecter {
	return &GroupApplicationsTable_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields:
func (_m *GroupApplicationsTable) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupApplicationsTable_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type GroupApplicationsTable_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *GroupApplicationsTable_Expecter) Create() *GroupApplicationsTable_Create_Call {
	return &GroupApplicationsTable_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *GroupApplicationsTable_Create_Call) Run(run func()) *GroupApplicationsTable_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GroupApplicationsTable_Create_Call) Return(_a0 error) *GroupApplicationsTable_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: app
func (_m *GroupApplicationsTable) Delete(app models.GroupApplications) error {
	ret := _m.Called(app)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.GroupApplications) error); ok {
		r0 = rf(app)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupApplicationsTable_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type GroupApplicationsTable_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - app models.GroupApplications
func (_e *GroupApplicationsTable_Expecter) Delete(app interface{}) *GroupApplicationsTable_Delete_Call {
	return &GroupApplicationsTable_Delete_Call{Call: _e.mock.On("Delete", app)}
}

func (_c *GroupApplicationsTable_Delete_Call) Run(run func(app models.GroupApplications)) *GroupApplicationsTable_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.GroupApplications))
	})
	return _c
}

func (_c *GroupApplicationsTable_Delete_Call) Return(_a0 error) *GroupApplicationsTable_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Drop provides a mock function with given fields:
func (_m *GroupApplicationsTable) Drop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupApplicationsTable_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type GroupApplicationsTable_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *GroupApplicationsTable_Expecter) Drop() *GroupApplicationsTable_Drop_Call {
	return &GroupApplicationsTable_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *GroupApplicationsTable_Drop_Call) Run(run func()) *GroupApplicationsTable_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GroupApplicationsTable_Drop_Call) Return(_a0 error) *GroupApplicationsTable_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetGroupApps provides a mock function with given fields: groupid
func (_m *GroupApplicationsTable) GetGroupApps(groupid int64) ([]models.GroupApplications, error) {
	ret := _m.Called(groupid)

	var r0 []models.GroupApplications
	if rf, ok := ret.Get(0).(func(int64) []models.GroupApplications); ok {
		r0 = rf(groupid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GroupApplications)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(groupid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupApplicationsTable_GetGroupApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupApps'
type GroupApplicationsTable_GetGroupApps_Call struct {
	*mock.Call
}

// GetGroupApps is a helper method to define mock.On call
//   - groupid int64
func (_e *GroupApplicationsTable_Expecter) GetGroupApps(groupid interface{}) *GroupApplicationsTable_GetGroupApps_Call {
	return &GroupApplicationsTable_GetGroupApps_Call{Call: _e.mock.On("GetGroupApps", groupid)}
}

func (_c *GroupApplicationsTable_GetGroupApps_Call) Run(run func(groupid int64)) *GroupApplicationsTable_GetGroupApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *GroupApplicationsTable_GetGroupApps_Call) Return(_a0 []models.GroupApplications, _a1 error) *GroupApplicationsTable_GetGroupApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: app
func (_m *GroupApplicationsTable) Insert(app *models.GroupApplications) error {
	ret := _m.Called(app)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.GroupApplications) error); ok {
		r0 = rf(app)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupApplicationsTable_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type GroupApplicationsTable_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - app *models.GroupApplications
func (_e *GroupApplicationsTable_Expecter) Insert(app interface{}) *GroupApplicationsTable_Insert_Call {
	return &GroupApplicationsTable_Insert_Call{Call: _e.mock.On("Insert", app)}
}

func (_c *GroupApplicationsTable_Insert_Call) Run(run func(app *models.GroupApplications)) *GroupApplicationsTable_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.GroupApplications))
	})
	return _c
}

func (_c *GroupApplicationsTable_Insert_Call) Return(_a0 error) *GroupApplicationsTable_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

// Upgrade provides a mock function with given fields: old_version, new_verison
func (_m *GroupApplicationsTable) Upgrade(old_version int, new_verison int) error {
	ret := _m.Called(old_version, new_verison)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(old_version, new_verison)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupApplicationsTable_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type GroupApplicationsTable_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - old_version int
//   - new_verison int
func (_e *GroupApplicationsTable_Expecter) Upgrade(old_version interface{}, new_verison interface{}) *GroupApplicationsTable_Upgrade_Call {
	return &GroupApplicationsTable_Upgrade_Call{Call: _e.mock.On("Upgrade", old_version, new_verison)}
}

func (_c *GroupApplicationsTable_Upgrade_Call) Run(run func(old_version int, new_verison int)) *GroupApplicationsTable_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *GroupApplicationsTable_Upgrade_Call) Return(_a0 error) *GroupApplicationsTable_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewGroupApplicationsTable interface {
	mock.TestingT
	Cleanup(func())
}

// NewGroupApplicationsTable creates a new instance of GroupApplicationsTable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGroupApplicationsTable(t mockConstructorTestingTNewGroupApplicationsTable) *GroupApplicationsTable {
	mock := &GroupApplicationsTable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
