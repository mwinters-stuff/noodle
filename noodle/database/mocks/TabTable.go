// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	models "github.com/mwinters-stuff/noodle/server/models"
	mock "github.com/stretchr/testify/mock"
)

// TabTable is an autogenerated mock type for the TabTable type
type TabTable struct {
	mock.Mock
}

type TabTable_Expecter struct {
	mock *mock.Mock
}

func (_m *TabTable) EXPECT() *TabTable_Expecter {
	return &TabTable_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields:
func (_m *TabTable) Create() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TabTable_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TabTable_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
func (_e *TabTable_Expecter) Create() *TabTable_Create_Call {
	return &TabTable_Create_Call{Call: _e.mock.On("Create")}
}

func (_c *TabTable_Create_Call) Run(run func()) *TabTable_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TabTable_Create_Call) Return(_a0 error) *TabTable_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *TabTable) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TabTable_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type TabTable_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int64
func (_e *TabTable_Expecter) Delete(id interface{}) *TabTable_Delete_Call {
	return &TabTable_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *TabTable_Delete_Call) Run(run func(id int64)) *TabTable_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *TabTable_Delete_Call) Return(_a0 error) *TabTable_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Drop provides a mock function with given fields:
func (_m *TabTable) Drop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TabTable_Drop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Drop'
type TabTable_Drop_Call struct {
	*mock.Call
}

// Drop is a helper method to define mock.On call
func (_e *TabTable_Expecter) Drop() *TabTable_Drop_Call {
	return &TabTable_Drop_Call{Call: _e.mock.On("Drop")}
}

func (_c *TabTable_Drop_Call) Run(run func()) *TabTable_Drop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TabTable_Drop_Call) Return(_a0 error) *TabTable_Drop_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *TabTable) GetAll() ([]*models.Tab, error) {
	ret := _m.Called()

	var r0 []*models.Tab
	if rf, ok := ret.Get(0).(func() []*models.Tab); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Tab)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TabTable_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type TabTable_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *TabTable_Expecter) GetAll() *TabTable_GetAll_Call {
	return &TabTable_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *TabTable_GetAll_Call) Run(run func()) *TabTable_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TabTable_GetAll_Call) Return(_a0 []*models.Tab, _a1 error) *TabTable_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Insert provides a mock function with given fields: tab
func (_m *TabTable) Insert(tab *models.Tab) error {
	ret := _m.Called(tab)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Tab) error); ok {
		r0 = rf(tab)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TabTable_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type TabTable_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - tab *models.Tab
func (_e *TabTable_Expecter) Insert(tab interface{}) *TabTable_Insert_Call {
	return &TabTable_Insert_Call{Call: _e.mock.On("Insert", tab)}
}

func (_c *TabTable_Insert_Call) Run(run func(tab *models.Tab)) *TabTable_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Tab))
	})
	return _c
}

func (_c *TabTable_Insert_Call) Return(_a0 error) *TabTable_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

// Update provides a mock function with given fields: tab
func (_m *TabTable) Update(tab models.Tab) error {
	ret := _m.Called(tab)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Tab) error); ok {
		r0 = rf(tab)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TabTable_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TabTable_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tab models.Tab
func (_e *TabTable_Expecter) Update(tab interface{}) *TabTable_Update_Call {
	return &TabTable_Update_Call{Call: _e.mock.On("Update", tab)}
}

func (_c *TabTable_Update_Call) Run(run func(tab models.Tab)) *TabTable_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Tab))
	})
	return _c
}

func (_c *TabTable_Update_Call) Return(_a0 error) *TabTable_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

// Upgrade provides a mock function with given fields: old_version, new_verison
func (_m *TabTable) Upgrade(old_version int, new_verison int) error {
	ret := _m.Called(old_version, new_verison)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(old_version, new_verison)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TabTable_Upgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upgrade'
type TabTable_Upgrade_Call struct {
	*mock.Call
}

// Upgrade is a helper method to define mock.On call
//   - old_version int
//   - new_verison int
func (_e *TabTable_Expecter) Upgrade(old_version interface{}, new_verison interface{}) *TabTable_Upgrade_Call {
	return &TabTable_Upgrade_Call{Call: _e.mock.On("Upgrade", old_version, new_verison)}
}

func (_c *TabTable_Upgrade_Call) Run(run func(old_version int, new_verison int)) *TabTable_Upgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *TabTable_Upgrade_Call) Return(_a0 error) *TabTable_Upgrade_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTabTable interface {
	mock.TestingT
	Cleanup(func())
}

// NewTabTable creates a new instance of TabTable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTabTable(t mockConstructorTestingTNewTabTable) *TabTable {
	mock := &TabTable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
