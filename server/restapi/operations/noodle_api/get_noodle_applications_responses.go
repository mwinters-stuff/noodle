// Code generated by go-swagger; DO NOT EDIT.

package noodle_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mwinters-stuff/noodle/server/models"
)

// GetNoodleApplicationsOKCode is the HTTP code returned for type GetNoodleApplicationsOK
const GetNoodleApplicationsOKCode int = 200

/*
GetNoodleApplicationsOK OK

swagger:response getNoodleApplicationsOK
*/
type GetNoodleApplicationsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Application `json:"body,omitempty"`
}

// NewGetNoodleApplicationsOK creates GetNoodleApplicationsOK with default headers values
func NewGetNoodleApplicationsOK() *GetNoodleApplicationsOK {

	return &GetNoodleApplicationsOK{}
}

// WithPayload adds the payload to the get noodle applications o k response
func (o *GetNoodleApplicationsOK) WithPayload(payload []*models.Application) *GetNoodleApplicationsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle applications o k response
func (o *GetNoodleApplicationsOK) SetPayload(payload []*models.Application) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleApplicationsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Application, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetNoodleApplicationsUnauthorizedCode is the HTTP code returned for type GetNoodleApplicationsUnauthorized
const GetNoodleApplicationsUnauthorizedCode int = 401

/*
GetNoodleApplicationsUnauthorized unauthorized

swagger:response getNoodleApplicationsUnauthorized
*/
type GetNoodleApplicationsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNoodleApplicationsUnauthorized creates GetNoodleApplicationsUnauthorized with default headers values
func NewGetNoodleApplicationsUnauthorized() *GetNoodleApplicationsUnauthorized {

	return &GetNoodleApplicationsUnauthorized{}
}

// WithPayload adds the payload to the get noodle applications unauthorized response
func (o *GetNoodleApplicationsUnauthorized) WithPayload(payload *models.Error) *GetNoodleApplicationsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle applications unauthorized response
func (o *GetNoodleApplicationsUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleApplicationsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNoodleApplicationsConflictCode is the HTTP code returned for type GetNoodleApplicationsConflict
const GetNoodleApplicationsConflictCode int = 409

/*
GetNoodleApplicationsConflict Failed

swagger:response getNoodleApplicationsConflict
*/
type GetNoodleApplicationsConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNoodleApplicationsConflict creates GetNoodleApplicationsConflict with default headers values
func NewGetNoodleApplicationsConflict() *GetNoodleApplicationsConflict {

	return &GetNoodleApplicationsConflict{}
}

// WithPayload adds the payload to the get noodle applications conflict response
func (o *GetNoodleApplicationsConflict) WithPayload(payload *models.Error) *GetNoodleApplicationsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle applications conflict response
func (o *GetNoodleApplicationsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleApplicationsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
