// Code generated by go-swagger; DO NOT EDIT.

package noodle_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mwinters-stuff/noodle/server/models"
)

// PostNoodleApplicationsOKCode is the HTTP code returned for type PostNoodleApplicationsOK
const PostNoodleApplicationsOKCode int = 200

/*
PostNoodleApplicationsOK OK

swagger:response postNoodleApplicationsOK
*/
type PostNoodleApplicationsOK struct {

	/*
	  In: Body
	*/
	Payload *models.Application `json:"body,omitempty"`
}

// NewPostNoodleApplicationsOK creates PostNoodleApplicationsOK with default headers values
func NewPostNoodleApplicationsOK() *PostNoodleApplicationsOK {

	return &PostNoodleApplicationsOK{}
}

// WithPayload adds the payload to the post noodle applications o k response
func (o *PostNoodleApplicationsOK) WithPayload(payload *models.Application) *PostNoodleApplicationsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post noodle applications o k response
func (o *PostNoodleApplicationsOK) SetPayload(payload *models.Application) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNoodleApplicationsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostNoodleApplicationsUnauthorizedCode is the HTTP code returned for type PostNoodleApplicationsUnauthorized
const PostNoodleApplicationsUnauthorizedCode int = 401

/*
PostNoodleApplicationsUnauthorized unauthorized

swagger:response postNoodleApplicationsUnauthorized
*/
type PostNoodleApplicationsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostNoodleApplicationsUnauthorized creates PostNoodleApplicationsUnauthorized with default headers values
func NewPostNoodleApplicationsUnauthorized() *PostNoodleApplicationsUnauthorized {

	return &PostNoodleApplicationsUnauthorized{}
}

// WithPayload adds the payload to the post noodle applications unauthorized response
func (o *PostNoodleApplicationsUnauthorized) WithPayload(payload *models.Error) *PostNoodleApplicationsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post noodle applications unauthorized response
func (o *PostNoodleApplicationsUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNoodleApplicationsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostNoodleApplicationsConflictCode is the HTTP code returned for type PostNoodleApplicationsConflict
const PostNoodleApplicationsConflictCode int = 409

/*
PostNoodleApplicationsConflict Failed

swagger:response postNoodleApplicationsConflict
*/
type PostNoodleApplicationsConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostNoodleApplicationsConflict creates PostNoodleApplicationsConflict with default headers values
func NewPostNoodleApplicationsConflict() *PostNoodleApplicationsConflict {

	return &PostNoodleApplicationsConflict{}
}

// WithPayload adds the payload to the post noodle applications conflict response
func (o *PostNoodleApplicationsConflict) WithPayload(payload *models.Error) *PostNoodleApplicationsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post noodle applications conflict response
func (o *PostNoodleApplicationsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNoodleApplicationsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
