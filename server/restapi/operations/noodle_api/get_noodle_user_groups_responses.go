// Code generated by go-swagger; DO NOT EDIT.

package noodle_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mwinters-stuff/noodle/server/models"
)

// GetNoodleUserGroupsOKCode is the HTTP code returned for type GetNoodleUserGroupsOK
const GetNoodleUserGroupsOKCode int = 200

/*
GetNoodleUserGroupsOK OK

swagger:response getNoodleUserGroupsOK
*/
type GetNoodleUserGroupsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.UserGroup `json:"body,omitempty"`
}

// NewGetNoodleUserGroupsOK creates GetNoodleUserGroupsOK with default headers values
func NewGetNoodleUserGroupsOK() *GetNoodleUserGroupsOK {

	return &GetNoodleUserGroupsOK{}
}

// WithPayload adds the payload to the get noodle user groups o k response
func (o *GetNoodleUserGroupsOK) WithPayload(payload []*models.UserGroup) *GetNoodleUserGroupsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle user groups o k response
func (o *GetNoodleUserGroupsOK) SetPayload(payload []*models.UserGroup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleUserGroupsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.UserGroup, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetNoodleUserGroupsUnauthorizedCode is the HTTP code returned for type GetNoodleUserGroupsUnauthorized
const GetNoodleUserGroupsUnauthorizedCode int = 401

/*
GetNoodleUserGroupsUnauthorized unauthorized

swagger:response getNoodleUserGroupsUnauthorized
*/
type GetNoodleUserGroupsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNoodleUserGroupsUnauthorized creates GetNoodleUserGroupsUnauthorized with default headers values
func NewGetNoodleUserGroupsUnauthorized() *GetNoodleUserGroupsUnauthorized {

	return &GetNoodleUserGroupsUnauthorized{}
}

// WithPayload adds the payload to the get noodle user groups unauthorized response
func (o *GetNoodleUserGroupsUnauthorized) WithPayload(payload *models.Error) *GetNoodleUserGroupsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle user groups unauthorized response
func (o *GetNoodleUserGroupsUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleUserGroupsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNoodleUserGroupsConflictCode is the HTTP code returned for type GetNoodleUserGroupsConflict
const GetNoodleUserGroupsConflictCode int = 409

/*
GetNoodleUserGroupsConflict Failed

swagger:response getNoodleUserGroupsConflict
*/
type GetNoodleUserGroupsConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNoodleUserGroupsConflict creates GetNoodleUserGroupsConflict with default headers values
func NewGetNoodleUserGroupsConflict() *GetNoodleUserGroupsConflict {

	return &GetNoodleUserGroupsConflict{}
}

// WithPayload adds the payload to the get noodle user groups conflict response
func (o *GetNoodleUserGroupsConflict) WithPayload(payload *models.Error) *GetNoodleUserGroupsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle user groups conflict response
func (o *GetNoodleUserGroupsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleUserGroupsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
