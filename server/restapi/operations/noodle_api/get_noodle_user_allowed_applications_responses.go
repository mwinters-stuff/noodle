// Code generated by go-swagger; DO NOT EDIT.

package noodle_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mwinters-stuff/noodle/server/models"
)

// GetNoodleUserAllowedApplicationsOKCode is the HTTP code returned for type GetNoodleUserAllowedApplicationsOK
const GetNoodleUserAllowedApplicationsOKCode int = 200

/*
GetNoodleUserAllowedApplicationsOK OK

swagger:response getNoodleUserAllowedApplicationsOK
*/
type GetNoodleUserAllowedApplicationsOK struct {

	/*
	  In: Body
	*/
	Payload models.UsersApplications `json:"body,omitempty"`
}

// NewGetNoodleUserAllowedApplicationsOK creates GetNoodleUserAllowedApplicationsOK with default headers values
func NewGetNoodleUserAllowedApplicationsOK() *GetNoodleUserAllowedApplicationsOK {

	return &GetNoodleUserAllowedApplicationsOK{}
}

// WithPayload adds the payload to the get noodle user allowed applications o k response
func (o *GetNoodleUserAllowedApplicationsOK) WithPayload(payload models.UsersApplications) *GetNoodleUserAllowedApplicationsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle user allowed applications o k response
func (o *GetNoodleUserAllowedApplicationsOK) SetPayload(payload models.UsersApplications) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleUserAllowedApplicationsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.UsersApplications{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetNoodleUserAllowedApplicationsUnauthorizedCode is the HTTP code returned for type GetNoodleUserAllowedApplicationsUnauthorized
const GetNoodleUserAllowedApplicationsUnauthorizedCode int = 401

/*
GetNoodleUserAllowedApplicationsUnauthorized unauthorized

swagger:response getNoodleUserAllowedApplicationsUnauthorized
*/
type GetNoodleUserAllowedApplicationsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNoodleUserAllowedApplicationsUnauthorized creates GetNoodleUserAllowedApplicationsUnauthorized with default headers values
func NewGetNoodleUserAllowedApplicationsUnauthorized() *GetNoodleUserAllowedApplicationsUnauthorized {

	return &GetNoodleUserAllowedApplicationsUnauthorized{}
}

// WithPayload adds the payload to the get noodle user allowed applications unauthorized response
func (o *GetNoodleUserAllowedApplicationsUnauthorized) WithPayload(payload *models.Error) *GetNoodleUserAllowedApplicationsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle user allowed applications unauthorized response
func (o *GetNoodleUserAllowedApplicationsUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleUserAllowedApplicationsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNoodleUserAllowedApplicationsConflictCode is the HTTP code returned for type GetNoodleUserAllowedApplicationsConflict
const GetNoodleUserAllowedApplicationsConflictCode int = 409

/*
GetNoodleUserAllowedApplicationsConflict Failed

swagger:response getNoodleUserAllowedApplicationsConflict
*/
type GetNoodleUserAllowedApplicationsConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNoodleUserAllowedApplicationsConflict creates GetNoodleUserAllowedApplicationsConflict with default headers values
func NewGetNoodleUserAllowedApplicationsConflict() *GetNoodleUserAllowedApplicationsConflict {

	return &GetNoodleUserAllowedApplicationsConflict{}
}

// WithPayload adds the payload to the get noodle user allowed applications conflict response
func (o *GetNoodleUserAllowedApplicationsConflict) WithPayload(payload *models.Error) *GetNoodleUserAllowedApplicationsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle user allowed applications conflict response
func (o *GetNoodleUserAllowedApplicationsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleUserAllowedApplicationsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
