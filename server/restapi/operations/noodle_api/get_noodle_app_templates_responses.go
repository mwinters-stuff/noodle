// Code generated by go-swagger; DO NOT EDIT.

package noodle_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mwinters-stuff/noodle/server/models"
)

// GetNoodleAppTemplatesOKCode is the HTTP code returned for type GetNoodleAppTemplatesOK
const GetNoodleAppTemplatesOKCode int = 200

/*
GetNoodleAppTemplatesOK OK

swagger:response getNoodleAppTemplatesOK
*/
type GetNoodleAppTemplatesOK struct {

	/*
	  In: Body
	*/
	Payload []*models.ApplicationTemplate `json:"body,omitempty"`
}

// NewGetNoodleAppTemplatesOK creates GetNoodleAppTemplatesOK with default headers values
func NewGetNoodleAppTemplatesOK() *GetNoodleAppTemplatesOK {

	return &GetNoodleAppTemplatesOK{}
}

// WithPayload adds the payload to the get noodle app templates o k response
func (o *GetNoodleAppTemplatesOK) WithPayload(payload []*models.ApplicationTemplate) *GetNoodleAppTemplatesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle app templates o k response
func (o *GetNoodleAppTemplatesOK) SetPayload(payload []*models.ApplicationTemplate) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleAppTemplatesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.ApplicationTemplate, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetNoodleAppTemplatesUnauthorizedCode is the HTTP code returned for type GetNoodleAppTemplatesUnauthorized
const GetNoodleAppTemplatesUnauthorizedCode int = 401

/*
GetNoodleAppTemplatesUnauthorized unauthorized

swagger:response getNoodleAppTemplatesUnauthorized
*/
type GetNoodleAppTemplatesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNoodleAppTemplatesUnauthorized creates GetNoodleAppTemplatesUnauthorized with default headers values
func NewGetNoodleAppTemplatesUnauthorized() *GetNoodleAppTemplatesUnauthorized {

	return &GetNoodleAppTemplatesUnauthorized{}
}

// WithPayload adds the payload to the get noodle app templates unauthorized response
func (o *GetNoodleAppTemplatesUnauthorized) WithPayload(payload *models.Error) *GetNoodleAppTemplatesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle app templates unauthorized response
func (o *GetNoodleAppTemplatesUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleAppTemplatesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetNoodleAppTemplatesConflictCode is the HTTP code returned for type GetNoodleAppTemplatesConflict
const GetNoodleAppTemplatesConflictCode int = 409

/*
GetNoodleAppTemplatesConflict Failed

swagger:response getNoodleAppTemplatesConflict
*/
type GetNoodleAppTemplatesConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetNoodleAppTemplatesConflict creates GetNoodleAppTemplatesConflict with default headers values
func NewGetNoodleAppTemplatesConflict() *GetNoodleAppTemplatesConflict {

	return &GetNoodleAppTemplatesConflict{}
}

// WithPayload adds the payload to the get noodle app templates conflict response
func (o *GetNoodleAppTemplatesConflict) WithPayload(payload *models.Error) *GetNoodleAppTemplatesConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get noodle app templates conflict response
func (o *GetNoodleAppTemplatesConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetNoodleAppTemplatesConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
