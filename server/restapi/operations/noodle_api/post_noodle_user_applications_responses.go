// Code generated by go-swagger; DO NOT EDIT.

package noodle_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mwinters-stuff/noodle/server/models"
)

// PostNoodleUserApplicationsOKCode is the HTTP code returned for type PostNoodleUserApplicationsOK
const PostNoodleUserApplicationsOKCode int = 200

/*
PostNoodleUserApplicationsOK OK

swagger:response postNoodleUserApplicationsOK
*/
type PostNoodleUserApplicationsOK struct {

	/*
	  In: Body
	*/
	Payload *models.UserApplications `json:"body,omitempty"`
}

// NewPostNoodleUserApplicationsOK creates PostNoodleUserApplicationsOK with default headers values
func NewPostNoodleUserApplicationsOK() *PostNoodleUserApplicationsOK {

	return &PostNoodleUserApplicationsOK{}
}

// WithPayload adds the payload to the post noodle user applications o k response
func (o *PostNoodleUserApplicationsOK) WithPayload(payload *models.UserApplications) *PostNoodleUserApplicationsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post noodle user applications o k response
func (o *PostNoodleUserApplicationsOK) SetPayload(payload *models.UserApplications) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNoodleUserApplicationsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostNoodleUserApplicationsUnauthorizedCode is the HTTP code returned for type PostNoodleUserApplicationsUnauthorized
const PostNoodleUserApplicationsUnauthorizedCode int = 401

/*
PostNoodleUserApplicationsUnauthorized unauthorized

swagger:response postNoodleUserApplicationsUnauthorized
*/
type PostNoodleUserApplicationsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostNoodleUserApplicationsUnauthorized creates PostNoodleUserApplicationsUnauthorized with default headers values
func NewPostNoodleUserApplicationsUnauthorized() *PostNoodleUserApplicationsUnauthorized {

	return &PostNoodleUserApplicationsUnauthorized{}
}

// WithPayload adds the payload to the post noodle user applications unauthorized response
func (o *PostNoodleUserApplicationsUnauthorized) WithPayload(payload *models.Error) *PostNoodleUserApplicationsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post noodle user applications unauthorized response
func (o *PostNoodleUserApplicationsUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNoodleUserApplicationsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostNoodleUserApplicationsConflictCode is the HTTP code returned for type PostNoodleUserApplicationsConflict
const PostNoodleUserApplicationsConflictCode int = 409

/*
PostNoodleUserApplicationsConflict Failed

swagger:response postNoodleUserApplicationsConflict
*/
type PostNoodleUserApplicationsConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostNoodleUserApplicationsConflict creates PostNoodleUserApplicationsConflict with default headers values
func NewPostNoodleUserApplicationsConflict() *PostNoodleUserApplicationsConflict {

	return &PostNoodleUserApplicationsConflict{}
}

// WithPayload adds the payload to the post noodle user applications conflict response
func (o *PostNoodleUserApplicationsConflict) WithPayload(payload *models.Error) *PostNoodleUserApplicationsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post noodle user applications conflict response
func (o *PostNoodleUserApplicationsConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostNoodleUserApplicationsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
