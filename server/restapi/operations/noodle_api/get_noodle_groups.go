// Code generated by go-swagger; DO NOT EDIT.

package noodle_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/mwinters-stuff/noodle/server/models"
)

// GetNoodleGroupsHandlerFunc turns a function with the right signature into a get noodle groups handler
type GetNoodleGroupsHandlerFunc func(GetNoodleGroupsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn GetNoodleGroupsHandlerFunc) Handle(params GetNoodleGroupsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// GetNoodleGroupsHandler interface for that can handle valid get noodle groups params
type GetNoodleGroupsHandler interface {
	Handle(GetNoodleGroupsParams, *models.Principal) middleware.Responder
}

// NewGetNoodleGroups creates a new http.Handler for the get noodle groups operation
func NewGetNoodleGroups(ctx *middleware.Context, handler GetNoodleGroupsHandler) *GetNoodleGroups {
	return &GetNoodleGroups{Context: ctx, Handler: handler}
}

/*
	GetNoodleGroups swagger:route GET /noodle/groups noodle-api getNoodleGroups

Gets the list of groups
*/
type GetNoodleGroups struct {
	Context *middleware.Context
	Handler GetNoodleGroupsHandler
}

func (o *GetNoodleGroups) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetNoodleGroupsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
