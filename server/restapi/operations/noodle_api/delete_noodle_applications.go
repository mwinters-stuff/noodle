// Code generated by go-swagger; DO NOT EDIT.

package noodle_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/mwinters-stuff/noodle/server/models"
)

// DeleteNoodleApplicationsHandlerFunc turns a function with the right signature into a delete noodle applications handler
type DeleteNoodleApplicationsHandlerFunc func(DeleteNoodleApplicationsParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteNoodleApplicationsHandlerFunc) Handle(params DeleteNoodleApplicationsParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// DeleteNoodleApplicationsHandler interface for that can handle valid delete noodle applications params
type DeleteNoodleApplicationsHandler interface {
	Handle(DeleteNoodleApplicationsParams, *models.Principal) middleware.Responder
}

// NewDeleteNoodleApplications creates a new http.Handler for the delete noodle applications operation
func NewDeleteNoodleApplications(ctx *middleware.Context, handler DeleteNoodleApplicationsHandler) *DeleteNoodleApplications {
	return &DeleteNoodleApplications{Context: ctx, Handler: handler}
}

/*
	DeleteNoodleApplications swagger:route DELETE /noodle/applications noodle-api deleteNoodleApplications

Deletes the application
*/
type DeleteNoodleApplications struct {
	Context *middleware.Context
	Handler DeleteNoodleApplicationsHandler
}

func (o *DeleteNoodleApplications) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteNoodleApplicationsParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
