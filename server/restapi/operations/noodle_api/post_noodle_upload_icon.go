// Code generated by go-swagger; DO NOT EDIT.

package noodle_api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/mwinters-stuff/noodle/server/models"
)

// PostNoodleUploadIconHandlerFunc turns a function with the right signature into a post noodle upload icon handler
type PostNoodleUploadIconHandlerFunc func(PostNoodleUploadIconParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostNoodleUploadIconHandlerFunc) Handle(params PostNoodleUploadIconParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostNoodleUploadIconHandler interface for that can handle valid post noodle upload icon params
type PostNoodleUploadIconHandler interface {
	Handle(PostNoodleUploadIconParams, *models.Principal) middleware.Responder
}

// NewPostNoodleUploadIcon creates a new http.Handler for the post noodle upload icon operation
func NewPostNoodleUploadIcon(ctx *middleware.Context, handler PostNoodleUploadIconHandler) *PostNoodleUploadIcon {
	return &PostNoodleUploadIcon{Context: ctx, Handler: handler}
}

/*
	PostNoodleUploadIcon swagger:route POST /noodle/upload-icon noodle-api postNoodleUploadIcon

Uploads an icon file
*/
type PostNoodleUploadIcon struct {
	Context *middleware.Context
	Handler PostNoodleUploadIconHandler
}

func (o *PostNoodleUploadIcon) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostNoodleUploadIconParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
