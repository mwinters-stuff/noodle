/* tslint:disable */
/* eslint-disable */
/**
 * Noodle
 * Noodle
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
  /**
   *
   * @type {number}
   * @memberof UserGroup
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof UserGroup
   */
  groupId?: number;
  /**
   *
   * @type {string}
   * @memberof UserGroup
   */
  groupDN?: string;
  /**
   *
   * @type {string}
   * @memberof UserGroup
   */
  groupName?: string;
  /**
   *
   * @type {number}
   * @memberof UserGroup
   */
  userId?: number;
  /**
   *
   * @type {string}
   * @memberof UserGroup
   */
  userDN?: string;
  /**
   *
   * @type {string}
   * @memberof UserGroup
   */
  userName?: string;
}

/**
 * Check if a given object implements the UserGroup interface.
 */
export function instanceOfUserGroup(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function UserGroupFromJSON(json: any): UserGroup {
  return UserGroupFromJSONTyped(json, false);
}

export function UserGroupFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): UserGroup {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'Id') ? undefined : json['Id'],
    groupId: !exists(json, 'GroupId') ? undefined : json['GroupId'],
    groupDN: !exists(json, 'GroupDN') ? undefined : json['GroupDN'],
    groupName: !exists(json, 'GroupName') ? undefined : json['GroupName'],
    userId: !exists(json, 'UserId') ? undefined : json['UserId'],
    userDN: !exists(json, 'UserDN') ? undefined : json['UserDN'],
    userName: !exists(json, 'UserName') ? undefined : json['UserName'],
  };
}

export function UserGroupToJSON(value?: UserGroup | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    Id: value.id,
    GroupId: value.groupId,
    GroupDN: value.groupDN,
    GroupName: value.groupName,
    UserId: value.userId,
    UserDN: value.userDN,
    UserName: value.userName,
  };
}
