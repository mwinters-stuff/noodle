/* tslint:disable */
/* eslint-disable */
/**
 * Noodle
 * Noodle
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Application } from './Application';
import {
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
} from './Application';

/**
 * 
 * @export
 * @interface UserApplications
 */
export interface UserApplications {
    /**
     * 
     * @type {number}
     * @memberof UserApplications
     */
    Id?: number;
    /**
     * 
     * @type {number}
     * @memberof UserApplications
     */
    ApplicationId?: number;
    /**
     * 
     * @type {number}
     * @memberof UserApplications
     */
    UserId?: number;
    /**
     * 
     * @type {Application}
     * @memberof UserApplications
     */
    Application?: Application;
}

/**
 * Check if a given object implements the UserApplications interface.
 */
export function instanceOfUserApplications(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserApplicationsFromJSON(json: any): UserApplications {
    return UserApplicationsFromJSONTyped(json, false);
}

export function UserApplicationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserApplications {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'Id': !exists(json, 'Id') ? undefined : json['Id'],
        'ApplicationId': !exists(json, 'ApplicationId') ? undefined : json['ApplicationId'],
        'UserId': !exists(json, 'UserId') ? undefined : json['UserId'],
        'Application': !exists(json, 'Application') ? undefined : ApplicationFromJSON(json['Application']),
    };
}

export function UserApplicationsToJSON(value?: UserApplications | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.Id,
        'ApplicationId': value.ApplicationId,
        'UserId': value.UserId,
        'Application': ApplicationToJSON(value.Application),
    };
}

