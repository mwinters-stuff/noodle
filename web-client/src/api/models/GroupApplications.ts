/* tslint:disable */
/* eslint-disable */
/**
 * Noodle
 * Noodle
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Application } from './Application';
import {
  ApplicationFromJSON,
  ApplicationFromJSONTyped,
  ApplicationToJSON,
} from './Application';

/**
 *
 * @export
 * @interface GroupApplications
 */
export interface GroupApplications {
  /**
   *
   * @type {number}
   * @memberof GroupApplications
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof GroupApplications
   */
  applicationId?: number;
  /**
   *
   * @type {number}
   * @memberof GroupApplications
   */
  groupId?: number;
  /**
   *
   * @type {Application}
   * @memberof GroupApplications
   */
  application?: Application;
}

/**
 * Check if a given object implements the GroupApplications interface.
 */
export function instanceOfGroupApplications(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function GroupApplicationsFromJSON(json: any): GroupApplications {
  return GroupApplicationsFromJSONTyped(json, false);
}

export function GroupApplicationsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): GroupApplications {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'Id') ? undefined : json['Id'],
    applicationId: !exists(json, 'ApplicationId')
      ? undefined
      : json['ApplicationId'],
    groupId: !exists(json, 'GroupId') ? undefined : json['GroupId'],
    application: !exists(json, 'Application')
      ? undefined
      : ApplicationFromJSON(json['Application']),
  };
}

export function GroupApplicationsToJSON(value?: GroupApplications | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    Id: value.id,
    ApplicationId: value.applicationId,
    GroupId: value.groupId,
    Application: ApplicationToJSON(value.application),
  };
}
