/* tslint:disable */
/* eslint-disable */
/**
 * Noodle
 * Noodle
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { ModelError, UserLogin, UserSession } from '../models';
import {
  ModelErrorFromJSON,
  ModelErrorToJSON,
  UserLoginFromJSON,
  UserLoginToJSON,
  UserSessionFromJSON,
  UserSessionToJSON,
} from '../models';

export interface AuthAuthenticatePostRequest {
  login: UserLogin;
}

export interface AuthSessionGetRequest {
  token: string;
}

/**
 *
 */
export class NoodleAuthApi extends runtime.BaseAPI {
  /**
   * Authenticates a User
   */
  async authAuthenticatePostRaw(
    requestParameters: AuthAuthenticatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserSession>> {
    if (
      requestParameters.login === null ||
      requestParameters.login === undefined
    ) {
      throw new runtime.RequiredError(
        'login',
        'Required parameter requestParameters.login was null or undefined when calling authAuthenticatePost.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/authenticate`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserLoginToJSON(requestParameters.login),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      UserSessionFromJSON(jsonValue)
    );
  }

  /**
   * Authenticates a User
   */
  async authAuthenticatePost(
    requestParameters: AuthAuthenticatePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserSession> {
    const response = await this.authAuthenticatePostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Log out a user
   */
  async authLogoutGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/auth/logout`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Log out a user
   */
  async authLogoutGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.authLogoutGetRaw(initOverrides);
  }

  /**
   * Get Session for Token
   */
  async authSessionGetRaw(
    requestParameters: AuthSessionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserSession>> {
    if (
      requestParameters.token === null ||
      requestParameters.token === undefined
    ) {
      throw new runtime.RequiredError(
        'token',
        'Required parameter requestParameters.token was null or undefined when calling authSessionGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.token !== undefined) {
      queryParameters['token'] = requestParameters.token;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/auth/session`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      UserSessionFromJSON(jsonValue)
    );
  }

  /**
   * Get Session for Token
   */
  async authSessionGet(
    requestParameters: AuthSessionGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserSession> {
    const response = await this.authSessionGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
