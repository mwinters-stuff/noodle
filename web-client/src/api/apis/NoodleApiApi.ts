/* tslint:disable */
/* eslint-disable */
/**
 * Noodle
 * Noodle
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Application,
  ApplicationTab,
  ApplicationTemplate,
  Group,
  GroupApplications,
  ModelError,
  Tab,
  User,
  UserApplications,
  UserGroup,
  UsersApplicationItem,
} from '../models';
import {
    ApplicationFromJSON,
    ApplicationToJSON,
    ApplicationTabFromJSON,
    ApplicationTabToJSON,
    ApplicationTemplateFromJSON,
    ApplicationTemplateToJSON,
    GroupFromJSON,
    GroupToJSON,
    GroupApplicationsFromJSON,
    GroupApplicationsToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    TabFromJSON,
    TabToJSON,
    UserFromJSON,
    UserToJSON,
    UserApplicationsFromJSON,
    UserApplicationsToJSON,
    UserGroupFromJSON,
    UserGroupToJSON,
    UsersApplicationItemFromJSON,
    UsersApplicationItemToJSON,
} from '../models';

export interface NoodleAppTemplatesGetRequest {
    Search: string;
}

export interface NoodleApplicationTabsDeleteRequest {
    ApplicationTabId: number;
}

export interface NoodleApplicationTabsGetRequest {
    TabId: number;
}

export interface NoodleApplicationTabsPostRequest {
    Action: NoodleApplicationTabsPostActionEnum;
    ApplicationTab: ApplicationTab;
}

export interface NoodleApplicationsDeleteRequest {
    ApplicationId: number;
}

export interface NoodleApplicationsGetRequest {
    ApplicationId?: number;
    ApplicationTemplate?: string;
}

export interface NoodleApplicationsPostRequest {
    Action: NoodleApplicationsPostActionEnum;
    Application: Application;
}

export interface NoodleGroupApplicationsDeleteRequest {
    GroupApplicationId: number;
}

export interface NoodleGroupApplicationsGetRequest {
    GroupId: number;
}

export interface NoodleGroupApplicationsPostRequest {
    GroupApplication: GroupApplications;
}

export interface NoodleGroupsGetRequest {
    Groupid?: number;
}

export interface NoodleTabsDeleteRequest {
    Tabid: number;
}

export interface NoodleTabsPostRequest {
    Action: NoodleTabsPostActionEnum;
    Tab: Tab;
}

export interface NoodleUploadIconPostRequest {
    Upfile?: Blob;
}

export interface NoodleUserAllowedApplicationsGetRequest {
    UserId: number;
}

export interface NoodleUserApplicationsDeleteRequest {
    UserApplicationId: number;
}

export interface NoodleUserApplicationsGetRequest {
    UserId: number;
}

export interface NoodleUserApplicationsPostRequest {
    UserApplication: UserApplications;
}

export interface NoodleUserGroupsGetRequest {
    Userid?: number;
    Groupid?: number;
}

export interface NoodleUsersGetRequest {
    Userid?: number;
}

/**
 * 
 */
export class NoodleApiApi extends runtime.BaseAPI {

    /**
     * Gets the list of application templates
     */
    async noodleAppTemplatesGetRaw(requestParameters: NoodleAppTemplatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApplicationTemplate>>> {
        if (requestParameters.Search === null || requestParameters.Search === undefined) {
            throw new runtime.RequiredError('Search','Required parameter requestParameters.Search was null or undefined when calling noodleAppTemplatesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.Search !== undefined) {
            queryParameters['search'] = requestParameters.Search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/app-templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationTemplateFromJSON));
    }

    /**
     * Gets the list of application templates
     */
    async noodleAppTemplatesGet(Search: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApplicationTemplate>> {
        const response = await this.noodleAppTemplatesGetRaw({ Search: Search }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the application_tab
     */
    async noodleApplicationTabsDeleteRaw(requestParameters: NoodleApplicationTabsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ApplicationTabId === null || requestParameters.ApplicationTabId === undefined) {
            throw new runtime.RequiredError('ApplicationTabId','Required parameter requestParameters.ApplicationTabId was null or undefined when calling noodleApplicationTabsDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.ApplicationTabId !== undefined) {
            queryParameters['application_tab_id'] = requestParameters.ApplicationTabId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/application-tabs`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the application_tab
     */
    async noodleApplicationTabsDelete(ApplicationTabId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noodleApplicationTabsDeleteRaw({ ApplicationTabId: ApplicationTabId }, initOverrides);
    }

    /**
     * Gets the list of applications under the tab
     */
    async noodleApplicationTabsGetRaw(requestParameters: NoodleApplicationTabsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ApplicationTab>>> {
        if (requestParameters.TabId === null || requestParameters.TabId === undefined) {
            throw new runtime.RequiredError('TabId','Required parameter requestParameters.TabId was null or undefined when calling noodleApplicationTabsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.TabId !== undefined) {
            queryParameters['tab_id'] = requestParameters.TabId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/application-tabs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationTabFromJSON));
    }

    /**
     * Gets the list of applications under the tab
     */
    async noodleApplicationTabsGet(TabId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ApplicationTab>> {
        const response = await this.noodleApplicationTabsGetRaw({ TabId: TabId }, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new application in a tab, changes tab, or display order
     */
    async noodleApplicationTabsPostRaw(requestParameters: NoodleApplicationTabsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationTab>> {
        if (requestParameters.Action === null || requestParameters.Action === undefined) {
            throw new runtime.RequiredError('Action','Required parameter requestParameters.Action was null or undefined when calling noodleApplicationTabsPost.');
        }

        if (requestParameters.ApplicationTab === null || requestParameters.ApplicationTab === undefined) {
            throw new runtime.RequiredError('ApplicationTab','Required parameter requestParameters.ApplicationTab was null or undefined when calling noodleApplicationTabsPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.Action !== undefined) {
            queryParameters['action'] = requestParameters.Action;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/application-tabs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationTabToJSON(requestParameters.ApplicationTab),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationTabFromJSON(jsonValue));
    }

    /**
     * Adds a new application in a tab, changes tab, or display order
     */
    async noodleApplicationTabsPost(Action: NoodleApplicationTabsPostActionEnum, ApplicationTab: ApplicationTab, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationTab> {
        const response = await this.noodleApplicationTabsPostRaw({ Action: Action, ApplicationTab: ApplicationTab }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the application
     */
    async noodleApplicationsDeleteRaw(requestParameters: NoodleApplicationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ApplicationId === null || requestParameters.ApplicationId === undefined) {
            throw new runtime.RequiredError('ApplicationId','Required parameter requestParameters.ApplicationId was null or undefined when calling noodleApplicationsDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.ApplicationId !== undefined) {
            queryParameters['application_id'] = requestParameters.ApplicationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/applications`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the application
     */
    async noodleApplicationsDelete(ApplicationId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noodleApplicationsDeleteRaw({ ApplicationId: ApplicationId }, initOverrides);
    }

    /**
     * Gets application by id or template_id
     */
    async noodleApplicationsGetRaw(requestParameters: NoodleApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Application>>> {
        const queryParameters: any = {};

        if (requestParameters.ApplicationId !== undefined) {
            queryParameters['application_id'] = requestParameters.ApplicationId;
        }

        if (requestParameters.ApplicationTemplate !== undefined) {
            queryParameters['application_template'] = requestParameters.ApplicationTemplate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationFromJSON));
    }

    /**
     * Gets application by id or template_id
     */
    async noodleApplicationsGet(ApplicationId?: number, ApplicationTemplate?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Application>> {
        const response = await this.noodleApplicationsGetRaw({ ApplicationId: ApplicationId, ApplicationTemplate: ApplicationTemplate }, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new application
     */
    async noodleApplicationsPostRaw(requestParameters: NoodleApplicationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters.Action === null || requestParameters.Action === undefined) {
            throw new runtime.RequiredError('Action','Required parameter requestParameters.Action was null or undefined when calling noodleApplicationsPost.');
        }

        if (requestParameters.Application === null || requestParameters.Application === undefined) {
            throw new runtime.RequiredError('Application','Required parameter requestParameters.Application was null or undefined when calling noodleApplicationsPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.Action !== undefined) {
            queryParameters['action'] = requestParameters.Action;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationToJSON(requestParameters.Application),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Adds a new application
     */
    async noodleApplicationsPost(Action: NoodleApplicationsPostActionEnum, Application: Application, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Application> {
        const response = await this.noodleApplicationsPostRaw({ Action: Action, Application: Application }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the group application
     */
    async noodleGroupApplicationsDeleteRaw(requestParameters: NoodleGroupApplicationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.GroupApplicationId === null || requestParameters.GroupApplicationId === undefined) {
            throw new runtime.RequiredError('GroupApplicationId','Required parameter requestParameters.GroupApplicationId was null or undefined when calling noodleGroupApplicationsDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.GroupApplicationId !== undefined) {
            queryParameters['group_application_id'] = requestParameters.GroupApplicationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/group-applications`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the group application
     */
    async noodleGroupApplicationsDelete(GroupApplicationId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noodleGroupApplicationsDeleteRaw({ GroupApplicationId: GroupApplicationId }, initOverrides);
    }

    /**
     * Gets the list of group applications
     */
    async noodleGroupApplicationsGetRaw(requestParameters: NoodleGroupApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GroupApplications>>> {
        if (requestParameters.GroupId === null || requestParameters.GroupId === undefined) {
            throw new runtime.RequiredError('GroupId','Required parameter requestParameters.GroupId was null or undefined when calling noodleGroupApplicationsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.GroupId !== undefined) {
            queryParameters['group_id'] = requestParameters.GroupId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/group-applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupApplicationsFromJSON));
    }

    /**
     * Gets the list of group applications
     */
    async noodleGroupApplicationsGet(GroupId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GroupApplications>> {
        const response = await this.noodleGroupApplicationsGetRaw({ GroupId: GroupId }, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new group application
     */
    async noodleGroupApplicationsPostRaw(requestParameters: NoodleGroupApplicationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupApplications>> {
        if (requestParameters.GroupApplication === null || requestParameters.GroupApplication === undefined) {
            throw new runtime.RequiredError('GroupApplication','Required parameter requestParameters.GroupApplication was null or undefined when calling noodleGroupApplicationsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/group-applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupApplicationsToJSON(requestParameters.GroupApplication),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupApplicationsFromJSON(jsonValue));
    }

    /**
     * Adds a new group application
     */
    async noodleGroupApplicationsPost(GroupApplication: GroupApplications, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupApplications> {
        const response = await this.noodleGroupApplicationsPostRaw({ GroupApplication: GroupApplication }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of groups
     */
    async noodleGroupsGetRaw(requestParameters: NoodleGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Group>>> {
        const queryParameters: any = {};

        if (requestParameters.Groupid !== undefined) {
            queryParameters['groupid'] = requestParameters.Groupid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupFromJSON));
    }

    /**
     * Gets the list of groups
     */
    async noodleGroupsGet(Groupid?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Group>> {
        const response = await this.noodleGroupsGetRaw({ Groupid: Groupid }, initOverrides);
        return await response.value();
    }

    /**
     * Loads Hiemdall App Templates to Database
     */
    async noodleHeimdallReloadGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/heimdall/reload`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Loads Hiemdall App Templates to Database
     */
    async noodleHeimdallReloadGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noodleHeimdallReloadGetRaw(initOverrides);
    }

    /**
     * Loads Users and Groups to Database
     */
    async noodleLdapReloadGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/ldap/reload`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Loads Users and Groups to Database
     */
    async noodleLdapReloadGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noodleLdapReloadGetRaw(initOverrides);
    }

    /**
     * Deletes the tab
     */
    async noodleTabsDeleteRaw(requestParameters: NoodleTabsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.Tabid === null || requestParameters.Tabid === undefined) {
            throw new runtime.RequiredError('Tabid','Required parameter requestParameters.Tabid was null or undefined when calling noodleTabsDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.Tabid !== undefined) {
            queryParameters['tabid'] = requestParameters.Tabid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/tabs`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the tab
     */
    async noodleTabsDelete(Tabid: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noodleTabsDeleteRaw({ Tabid: Tabid }, initOverrides);
    }

    /**
     * Gets the list of tabs
     */
    async noodleTabsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Tab>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/tabs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TabFromJSON));
    }

    /**
     * Gets the list of tabs
     */
    async noodleTabsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tab>> {
        const response = await this.noodleTabsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Adds a new tab
     */
    async noodleTabsPostRaw(requestParameters: NoodleTabsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tab>> {
        if (requestParameters.Action === null || requestParameters.Action === undefined) {
            throw new runtime.RequiredError('Action','Required parameter requestParameters.Action was null or undefined when calling noodleTabsPost.');
        }

        if (requestParameters.Tab === null || requestParameters.Tab === undefined) {
            throw new runtime.RequiredError('Tab','Required parameter requestParameters.Tab was null or undefined when calling noodleTabsPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.Action !== undefined) {
            queryParameters['action'] = requestParameters.Action;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/tabs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TabToJSON(requestParameters.Tab),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TabFromJSON(jsonValue));
    }

    /**
     * Adds a new tab
     */
    async noodleTabsPost(Action: NoodleTabsPostActionEnum, Tab: Tab, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tab> {
        const response = await this.noodleTabsPostRaw({ Action: Action, Tab: Tab }, initOverrides);
        return await response.value();
    }

    /**
     * Gets list of upload icon filenames
     */
    async noodleUploadIconGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/upload-icon`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Gets list of upload icon filenames
     */
    async noodleUploadIconGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.noodleUploadIconGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Uploads an icon file
     */
    async noodleUploadIconPostRaw(requestParameters: NoodleUploadIconPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.Upfile !== undefined) {
            formParams.append('upfile', requestParameters.Upfile as any);
        }

        const response = await this.request({
            path: `/noodle/upload-icon`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uploads an icon file
     */
    async noodleUploadIconPost(Upfile?: Blob, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noodleUploadIconPostRaw({ Upfile: Upfile }, initOverrides);
    }

    /**
     * Gets the list of the applications the user can see
     */
    async noodleUserAllowedApplicationsGetRaw(requestParameters: NoodleUserAllowedApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsersApplicationItem>>> {
        if (requestParameters.UserId === null || requestParameters.UserId === undefined) {
            throw new runtime.RequiredError('UserId','Required parameter requestParameters.UserId was null or undefined when calling noodleUserAllowedApplicationsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.UserId !== undefined) {
            queryParameters['user_id'] = requestParameters.UserId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/user-allowed-applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsersApplicationItemFromJSON));
    }

    /**
     * Gets the list of the applications the user can see
     */
    async noodleUserAllowedApplicationsGet(UserId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsersApplicationItem>> {
        const response = await this.noodleUserAllowedApplicationsGetRaw({ UserId: UserId }, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the user application
     */
    async noodleUserApplicationsDeleteRaw(requestParameters: NoodleUserApplicationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.UserApplicationId === null || requestParameters.UserApplicationId === undefined) {
            throw new runtime.RequiredError('UserApplicationId','Required parameter requestParameters.UserApplicationId was null or undefined when calling noodleUserApplicationsDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.UserApplicationId !== undefined) {
            queryParameters['user_application_id'] = requestParameters.UserApplicationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/user-applications`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the user application
     */
    async noodleUserApplicationsDelete(UserApplicationId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noodleUserApplicationsDeleteRaw({ UserApplicationId: UserApplicationId }, initOverrides);
    }

    /**
     * Gets the list of user applications
     */
    async noodleUserApplicationsGetRaw(requestParameters: NoodleUserApplicationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserApplications>>> {
        if (requestParameters.UserId === null || requestParameters.UserId === undefined) {
            throw new runtime.RequiredError('UserId','Required parameter requestParameters.UserId was null or undefined when calling noodleUserApplicationsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.UserId !== undefined) {
            queryParameters['user_id'] = requestParameters.UserId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/user-applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserApplicationsFromJSON));
    }

    /**
     * Gets the list of user applications
     */
    async noodleUserApplicationsGet(UserId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserApplications>> {
        const response = await this.noodleUserApplicationsGetRaw({ UserId: UserId }, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new user application
     */
    async noodleUserApplicationsPostRaw(requestParameters: NoodleUserApplicationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserApplications>> {
        if (requestParameters.UserApplication === null || requestParameters.UserApplication === undefined) {
            throw new runtime.RequiredError('UserApplication','Required parameter requestParameters.UserApplication was null or undefined when calling noodleUserApplicationsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/user-applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserApplicationsToJSON(requestParameters.UserApplication),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserApplicationsFromJSON(jsonValue));
    }

    /**
     * Adds a new user application
     */
    async noodleUserApplicationsPost(UserApplication: UserApplications, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserApplications> {
        const response = await this.noodleUserApplicationsPostRaw({ UserApplication: UserApplication }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of Groups for a user or users for a group
     */
    async noodleUserGroupsGetRaw(requestParameters: NoodleUserGroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserGroup>>> {
        const queryParameters: any = {};

        if (requestParameters.Userid !== undefined) {
            queryParameters['userid'] = requestParameters.Userid;
        }

        if (requestParameters.Groupid !== undefined) {
            queryParameters['groupid'] = requestParameters.Groupid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/user-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserGroupFromJSON));
    }

    /**
     * Gets the list of Groups for a user or users for a group
     */
    async noodleUserGroupsGet(Userid?: number, Groupid?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserGroup>> {
        const response = await this.noodleUserGroupsGetRaw({ Userid: Userid, Groupid: Groupid }, initOverrides);
        return await response.value();
    }

    /**
     * Gets the list of users or a single user
     */
    async noodleUsersGetRaw(requestParameters: NoodleUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        if (requestParameters.Userid !== undefined) {
            queryParameters['userid'] = requestParameters.Userid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Remote-User"] = this.configuration.apiKey("Remote-User"); // remote-user authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Token"] = this.configuration.apiKey("X-Token"); // token authentication
        }

        const response = await this.request({
            path: `/noodle/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Gets the list of users or a single user
     */
    async noodleUsersGet(Userid?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.noodleUsersGetRaw({ Userid: Userid }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const NoodleApplicationTabsPostActionEnum = {
    Insert: 'insert',
    UpdateTab: 'updateTab',
    UpdateDisplayOrder: 'updateDisplayOrder'
} as const;
export type NoodleApplicationTabsPostActionEnum = typeof NoodleApplicationTabsPostActionEnum[keyof typeof NoodleApplicationTabsPostActionEnum];
/**
 * @export
 */
export const NoodleApplicationsPostActionEnum = {
    Insert: 'insert',
    Update: 'update'
} as const;
export type NoodleApplicationsPostActionEnum = typeof NoodleApplicationsPostActionEnum[keyof typeof NoodleApplicationsPostActionEnum];
/**
 * @export
 */
export const NoodleTabsPostActionEnum = {
    Insert: 'insert',
    Update: 'update'
} as const;
export type NoodleTabsPostActionEnum = typeof NoodleTabsPostActionEnum[keyof typeof NoodleTabsPostActionEnum];
