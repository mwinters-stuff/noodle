/* tslint:disable */
/* eslint-disable */
/**
 * Noodle
 * Noodle
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  Application,
  ApplicationTab,
  ApplicationTemplate,
  Group,
  GroupApplications,
  ModelError,
  Tab,
  User,
  UserApplications,
  UserGroup,
  UsersApplicationItem,
} from '../models';
import {
  ApplicationFromJSON,
  ApplicationToJSON,
  ApplicationTabFromJSON,
  ApplicationTabToJSON,
  ApplicationTemplateFromJSON,
  ApplicationTemplateToJSON,
  GroupFromJSON,
  GroupToJSON,
  GroupApplicationsFromJSON,
  GroupApplicationsToJSON,
  ModelErrorFromJSON,
  ModelErrorToJSON,
  TabFromJSON,
  TabToJSON,
  UserFromJSON,
  UserToJSON,
  UserApplicationsFromJSON,
  UserApplicationsToJSON,
  UserGroupFromJSON,
  UserGroupToJSON,
  UsersApplicationItemFromJSON,
  UsersApplicationItemToJSON,
} from '../models';

export interface NoodleAppTemplatesGetRequest {
  search: string;
}

export interface NoodleApplicationTabsDeleteRequest {
  applicationTabId: number;
}

export interface NoodleApplicationTabsGetRequest {
  tabId: number;
}

export interface NoodleApplicationTabsPostRequest {
  action: NoodleApplicationTabsPostActionEnum;
  applicationTab: ApplicationTab;
}

export interface NoodleApplicationsDeleteRequest {
  applicationId: number;
}

export interface NoodleApplicationsGetRequest {
  applicationId?: number;
  applicationTemplate?: string;
}

export interface NoodleApplicationsPostRequest {
  application: Application;
}

export interface NoodleGroupApplicationsDeleteRequest {
  groupApplicationId: number;
}

export interface NoodleGroupApplicationsGetRequest {
  groupId: number;
}

export interface NoodleGroupApplicationsPostRequest {
  groupApplication: GroupApplications;
}

export interface NoodleGroupsGetRequest {
  groupid?: number;
}

export interface NoodleTabsDeleteRequest {
  tabid: number;
}

export interface NoodleTabsPostRequest {
  action: NoodleTabsPostActionEnum;
  tab: Tab;
}

export interface NoodleUserAllowedApplicationsGetRequest {
  userId: number;
}

export interface NoodleUserApplicationsDeleteRequest {
  userApplicationId: number;
}

export interface NoodleUserApplicationsGetRequest {
  userId: number;
}

export interface NoodleUserApplicationsPostRequest {
  userApplication: UserApplications;
}

export interface NoodleUserGroupsGetRequest {
  userid?: number;
  groupid?: number;
}

export interface NoodleUsersGetRequest {
  userid?: number;
}

/**
 *
 */
export class NoodleApiApi extends runtime.BaseAPI {
  /**
   * Gets the list of application templates
   */
  async noodleAppTemplatesGetRaw(
    requestParameters: NoodleAppTemplatesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<ApplicationTemplate>>> {
    if (
      requestParameters.search === null ||
      requestParameters.search === undefined
    ) {
      throw new runtime.RequiredError(
        'search',
        'Required parameter requestParameters.search was null or undefined when calling noodleAppTemplatesGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.search !== undefined) {
      queryParameters['search'] = requestParameters.search;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/app-templates`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(ApplicationTemplateFromJSON)
    );
  }

  /**
   * Gets the list of application templates
   */
  async noodleAppTemplatesGet(
    requestParameters: NoodleAppTemplatesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ApplicationTemplate>> {
    const response = await this.noodleAppTemplatesGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Deletes the application_tab
   */
  async noodleApplicationTabsDeleteRaw(
    requestParameters: NoodleApplicationTabsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.applicationTabId === null ||
      requestParameters.applicationTabId === undefined
    ) {
      throw new runtime.RequiredError(
        'applicationTabId',
        'Required parameter requestParameters.applicationTabId was null or undefined when calling noodleApplicationTabsDelete.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.applicationTabId !== undefined) {
      queryParameters['application_tab_id'] =
        requestParameters.applicationTabId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/application-tabs`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes the application_tab
   */
  async noodleApplicationTabsDelete(
    requestParameters: NoodleApplicationTabsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.noodleApplicationTabsDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Gets the list of applications under the tab
   */
  async noodleApplicationTabsGetRaw(
    requestParameters: NoodleApplicationTabsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<ApplicationTab>>> {
    if (
      requestParameters.tabId === null ||
      requestParameters.tabId === undefined
    ) {
      throw new runtime.RequiredError(
        'tabId',
        'Required parameter requestParameters.tabId was null or undefined when calling noodleApplicationTabsGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.tabId !== undefined) {
      queryParameters['tab_id'] = requestParameters.tabId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/application-tabs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(ApplicationTabFromJSON)
    );
  }

  /**
   * Gets the list of applications under the tab
   */
  async noodleApplicationTabsGet(
    requestParameters: NoodleApplicationTabsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ApplicationTab>> {
    const response = await this.noodleApplicationTabsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Adds a new application in a  tab
   */
  async noodleApplicationTabsPostRaw(
    requestParameters: NoodleApplicationTabsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ApplicationTab>> {
    if (
      requestParameters.action === null ||
      requestParameters.action === undefined
    ) {
      throw new runtime.RequiredError(
        'action',
        'Required parameter requestParameters.action was null or undefined when calling noodleApplicationTabsPost.'
      );
    }

    if (
      requestParameters.applicationTab === null ||
      requestParameters.applicationTab === undefined
    ) {
      throw new runtime.RequiredError(
        'applicationTab',
        'Required parameter requestParameters.applicationTab was null or undefined when calling noodleApplicationTabsPost.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.action !== undefined) {
      queryParameters['action'] = requestParameters.action;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/application-tabs`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ApplicationTabToJSON(requestParameters.applicationTab),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ApplicationTabFromJSON(jsonValue)
    );
  }

  /**
   * Adds a new application in a  tab
   */
  async noodleApplicationTabsPost(
    requestParameters: NoodleApplicationTabsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ApplicationTab> {
    const response = await this.noodleApplicationTabsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Deletes the application
   */
  async noodleApplicationsDeleteRaw(
    requestParameters: NoodleApplicationsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.applicationId === null ||
      requestParameters.applicationId === undefined
    ) {
      throw new runtime.RequiredError(
        'applicationId',
        'Required parameter requestParameters.applicationId was null or undefined when calling noodleApplicationsDelete.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.applicationId !== undefined) {
      queryParameters['application_id'] = requestParameters.applicationId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/applications`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes the application
   */
  async noodleApplicationsDelete(
    requestParameters: NoodleApplicationsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.noodleApplicationsDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Gets application by id or template_id
   */
  async noodleApplicationsGetRaw(
    requestParameters: NoodleApplicationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Application>>> {
    const queryParameters: any = {};

    if (requestParameters.applicationId !== undefined) {
      queryParameters['application_id'] = requestParameters.applicationId;
    }

    if (requestParameters.applicationTemplate !== undefined) {
      queryParameters['application_template'] =
        requestParameters.applicationTemplate;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/applications`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(ApplicationFromJSON)
    );
  }

  /**
   * Gets application by id or template_id
   */
  async noodleApplicationsGet(
    requestParameters: NoodleApplicationsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Application>> {
    const response = await this.noodleApplicationsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Adds a new application
   */
  async noodleApplicationsPostRaw(
    requestParameters: NoodleApplicationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Application>> {
    if (
      requestParameters.application === null ||
      requestParameters.application === undefined
    ) {
      throw new runtime.RequiredError(
        'application',
        'Required parameter requestParameters.application was null or undefined when calling noodleApplicationsPost.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/applications`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ApplicationToJSON(requestParameters.application),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ApplicationFromJSON(jsonValue)
    );
  }

  /**
   * Adds a new application
   */
  async noodleApplicationsPost(
    requestParameters: NoodleApplicationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Application> {
    const response = await this.noodleApplicationsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Deletes the group application
   */
  async noodleGroupApplicationsDeleteRaw(
    requestParameters: NoodleGroupApplicationsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.groupApplicationId === null ||
      requestParameters.groupApplicationId === undefined
    ) {
      throw new runtime.RequiredError(
        'groupApplicationId',
        'Required parameter requestParameters.groupApplicationId was null or undefined when calling noodleGroupApplicationsDelete.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.groupApplicationId !== undefined) {
      queryParameters['group_application_id'] =
        requestParameters.groupApplicationId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/group-applications`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes the group application
   */
  async noodleGroupApplicationsDelete(
    requestParameters: NoodleGroupApplicationsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.noodleGroupApplicationsDeleteRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Gets the list of group applications
   */
  async noodleGroupApplicationsGetRaw(
    requestParameters: NoodleGroupApplicationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<GroupApplications>>> {
    if (
      requestParameters.groupId === null ||
      requestParameters.groupId === undefined
    ) {
      throw new runtime.RequiredError(
        'groupId',
        'Required parameter requestParameters.groupId was null or undefined when calling noodleGroupApplicationsGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.groupId !== undefined) {
      queryParameters['group_id'] = requestParameters.groupId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/group-applications`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(GroupApplicationsFromJSON)
    );
  }

  /**
   * Gets the list of group applications
   */
  async noodleGroupApplicationsGet(
    requestParameters: NoodleGroupApplicationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<GroupApplications>> {
    const response = await this.noodleGroupApplicationsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Adds a new group application
   */
  async noodleGroupApplicationsPostRaw(
    requestParameters: NoodleGroupApplicationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GroupApplications>> {
    if (
      requestParameters.groupApplication === null ||
      requestParameters.groupApplication === undefined
    ) {
      throw new runtime.RequiredError(
        'groupApplication',
        'Required parameter requestParameters.groupApplication was null or undefined when calling noodleGroupApplicationsPost.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/group-applications`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GroupApplicationsToJSON(requestParameters.groupApplication),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      GroupApplicationsFromJSON(jsonValue)
    );
  }

  /**
   * Adds a new group application
   */
  async noodleGroupApplicationsPost(
    requestParameters: NoodleGroupApplicationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GroupApplications> {
    const response = await this.noodleGroupApplicationsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Gets the list of groups
   */
  async noodleGroupsGetRaw(
    requestParameters: NoodleGroupsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Group>>> {
    const queryParameters: any = {};

    if (requestParameters.groupid !== undefined) {
      queryParameters['groupid'] = requestParameters.groupid;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/groups`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(GroupFromJSON)
    );
  }

  /**
   * Gets the list of groups
   */
  async noodleGroupsGet(
    requestParameters: NoodleGroupsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Group>> {
    const response = await this.noodleGroupsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Loads Hiemdall App Templates to Database
   */
  async noodleHeimdallReloadGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/heimdall/reload`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Loads Hiemdall App Templates to Database
   */
  async noodleHeimdallReloadGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.noodleHeimdallReloadGetRaw(initOverrides);
  }

  /**
   * Loads Users and Groups to Database
   */
  async noodleLdapReloadGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/ldap/reload`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Loads Users and Groups to Database
   */
  async noodleLdapReloadGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.noodleLdapReloadGetRaw(initOverrides);
  }

  /**
   * Deletes the tab
   */
  async noodleTabsDeleteRaw(
    requestParameters: NoodleTabsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.tabid === null ||
      requestParameters.tabid === undefined
    ) {
      throw new runtime.RequiredError(
        'tabid',
        'Required parameter requestParameters.tabid was null or undefined when calling noodleTabsDelete.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.tabid !== undefined) {
      queryParameters['tabid'] = requestParameters.tabid;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/tabs`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes the tab
   */
  async noodleTabsDelete(
    requestParameters: NoodleTabsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.noodleTabsDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Gets the list of tabs
   */
  async noodleTabsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Tab>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/tabs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(TabFromJSON)
    );
  }

  /**
   * Gets the list of tabs
   */
  async noodleTabsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Tab>> {
    const response = await this.noodleTabsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Adds a new tab
   */
  async noodleTabsPostRaw(
    requestParameters: NoodleTabsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Tab>> {
    if (
      requestParameters.action === null ||
      requestParameters.action === undefined
    ) {
      throw new runtime.RequiredError(
        'action',
        'Required parameter requestParameters.action was null or undefined when calling noodleTabsPost.'
      );
    }

    if (requestParameters.tab === null || requestParameters.tab === undefined) {
      throw new runtime.RequiredError(
        'tab',
        'Required parameter requestParameters.tab was null or undefined when calling noodleTabsPost.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.action !== undefined) {
      queryParameters['action'] = requestParameters.action;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/tabs`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: TabToJSON(requestParameters.tab),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      TabFromJSON(jsonValue)
    );
  }

  /**
   * Adds a new tab
   */
  async noodleTabsPost(
    requestParameters: NoodleTabsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Tab> {
    const response = await this.noodleTabsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Gets the list of the applications the user can see
   */
  async noodleUserAllowedApplicationsGetRaw(
    requestParameters: NoodleUserAllowedApplicationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UsersApplicationItem>>> {
    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling noodleUserAllowedApplicationsGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters['user_id'] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/user-allowed-applications`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UsersApplicationItemFromJSON)
    );
  }

  /**
   * Gets the list of the applications the user can see
   */
  async noodleUserAllowedApplicationsGet(
    requestParameters: NoodleUserAllowedApplicationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UsersApplicationItem>> {
    const response = await this.noodleUserAllowedApplicationsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Deletes the user application
   */
  async noodleUserApplicationsDeleteRaw(
    requestParameters: NoodleUserApplicationsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.userApplicationId === null ||
      requestParameters.userApplicationId === undefined
    ) {
      throw new runtime.RequiredError(
        'userApplicationId',
        'Required parameter requestParameters.userApplicationId was null or undefined when calling noodleUserApplicationsDelete.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.userApplicationId !== undefined) {
      queryParameters['user_application_id'] =
        requestParameters.userApplicationId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/user-applications`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Deletes the user application
   */
  async noodleUserApplicationsDelete(
    requestParameters: NoodleUserApplicationsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.noodleUserApplicationsDeleteRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Gets the list of user applications
   */
  async noodleUserApplicationsGetRaw(
    requestParameters: NoodleUserApplicationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserApplications>>> {
    if (
      requestParameters.userId === null ||
      requestParameters.userId === undefined
    ) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling noodleUserApplicationsGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.userId !== undefined) {
      queryParameters['user_id'] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/user-applications`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UserApplicationsFromJSON)
    );
  }

  /**
   * Gets the list of user applications
   */
  async noodleUserApplicationsGet(
    requestParameters: NoodleUserApplicationsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserApplications>> {
    const response = await this.noodleUserApplicationsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Adds a new user application
   */
  async noodleUserApplicationsPostRaw(
    requestParameters: NoodleUserApplicationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserApplications>> {
    if (
      requestParameters.userApplication === null ||
      requestParameters.userApplication === undefined
    ) {
      throw new runtime.RequiredError(
        'userApplication',
        'Required parameter requestParameters.userApplication was null or undefined when calling noodleUserApplicationsPost.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/user-applications`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: UserApplicationsToJSON(requestParameters.userApplication),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      UserApplicationsFromJSON(jsonValue)
    );
  }

  /**
   * Adds a new user application
   */
  async noodleUserApplicationsPost(
    requestParameters: NoodleUserApplicationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserApplications> {
    const response = await this.noodleUserApplicationsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Gets the list of Groups for a user or users for a group
   */
  async noodleUserGroupsGetRaw(
    requestParameters: NoodleUserGroupsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserGroup>>> {
    const queryParameters: any = {};

    if (requestParameters.userid !== undefined) {
      queryParameters['userid'] = requestParameters.userid;
    }

    if (requestParameters.groupid !== undefined) {
      queryParameters['groupid'] = requestParameters.groupid;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/user-groups`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UserGroupFromJSON)
    );
  }

  /**
   * Gets the list of Groups for a user or users for a group
   */
  async noodleUserGroupsGet(
    requestParameters: NoodleUserGroupsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserGroup>> {
    const response = await this.noodleUserGroupsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Gets the list of users or a single user
   */
  async noodleUsersGetRaw(
    requestParameters: NoodleUsersGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<User>>> {
    const queryParameters: any = {};

    if (requestParameters.userid !== undefined) {
      queryParameters['userid'] = requestParameters.userid;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Remote-User'] =
        this.configuration.apiKey('Remote-User'); // remote-user authentication
    }

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Token'] = this.configuration.apiKey('X-Token'); // token authentication
    }

    const response = await this.request(
      {
        path: `/noodle/users`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(UserFromJSON)
    );
  }

  /**
   * Gets the list of users or a single user
   */
  async noodleUsersGet(
    requestParameters: NoodleUsersGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<User>> {
    const response = await this.noodleUsersGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

/**
 * @export
 */
export const NoodleApplicationTabsPostActionEnum = {
  Insert: 'insert',
  Update: 'update',
} as const;
export type NoodleApplicationTabsPostActionEnum =
  (typeof NoodleApplicationTabsPostActionEnum)[keyof typeof NoodleApplicationTabsPostActionEnum];
/**
 * @export
 */
export const NoodleTabsPostActionEnum = {
  Insert: 'insert',
  Update: 'update',
} as const;
export type NoodleTabsPostActionEnum =
  (typeof NoodleTabsPostActionEnum)[keyof typeof NoodleTabsPostActionEnum];
