// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// PointScanner is an autogenerated mock type for the PointScanner type
type PointScanner struct {
	mock.Mock
}

type PointScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *PointScanner) EXPECT() *PointScanner_Expecter {
	return &PointScanner_Expecter{mock: &_m.Mock}
}

// ScanPoint provides a mock function with given fields: v
func (_m *PointScanner) ScanPoint(v pgtype.Point) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgtype.Point) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PointScanner_ScanPoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanPoint'
type PointScanner_ScanPoint_Call struct {
	*mock.Call
}

// ScanPoint is a helper method to define mock.On call
//   - v pgtype.Point
func (_e *PointScanner_Expecter) ScanPoint(v interface{}) *PointScanner_ScanPoint_Call {
	return &PointScanner_ScanPoint_Call{Call: _e.mock.On("ScanPoint", v)}
}

func (_c *PointScanner_ScanPoint_Call) Run(run func(v pgtype.Point)) *PointScanner_ScanPoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgtype.Point))
	})
	return _c
}

func (_c *PointScanner_ScanPoint_Call) Return(_a0 error) *PointScanner_ScanPoint_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewPointScanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewPointScanner creates a new instance of PointScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPointScanner(t mockConstructorTestingTNewPointScanner) *PointScanner {
	mock := &PointScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
