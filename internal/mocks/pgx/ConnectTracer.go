// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// ConnectTracer is an autogenerated mock type for the ConnectTracer type
type ConnectTracer struct {
	mock.Mock
}

type ConnectTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectTracer) EXPECT() *ConnectTracer_Expecter {
	return &ConnectTracer_Expecter{mock: &_m.Mock}
}

// TraceConnectEnd provides a mock function with given fields: ctx, data
func (_m *ConnectTracer) TraceConnectEnd(ctx context.Context, data pgx.TraceConnectEndData) {
	_m.Called(ctx, data)
}

// ConnectTracer_TraceConnectEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceConnectEnd'
type ConnectTracer_TraceConnectEnd_Call struct {
	*mock.Call
}

// TraceConnectEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - data pgx.TraceConnectEndData
func (_e *ConnectTracer_Expecter) TraceConnectEnd(ctx interface{}, data interface{}) *ConnectTracer_TraceConnectEnd_Call {
	return &ConnectTracer_TraceConnectEnd_Call{Call: _e.mock.On("TraceConnectEnd", ctx, data)}
}

func (_c *ConnectTracer_TraceConnectEnd_Call) Run(run func(ctx context.Context, data pgx.TraceConnectEndData)) *ConnectTracer_TraceConnectEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.TraceConnectEndData))
	})
	return _c
}

func (_c *ConnectTracer_TraceConnectEnd_Call) Return() *ConnectTracer_TraceConnectEnd_Call {
	_c.Call.Return()
	return _c
}

// TraceConnectStart provides a mock function with given fields: ctx, data
func (_m *ConnectTracer) TraceConnectStart(ctx context.Context, data pgx.TraceConnectStartData) context.Context {
	ret := _m.Called(ctx, data)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, pgx.TraceConnectStartData) context.Context); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// ConnectTracer_TraceConnectStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceConnectStart'
type ConnectTracer_TraceConnectStart_Call struct {
	*mock.Call
}

// TraceConnectStart is a helper method to define mock.On call
//   - ctx context.Context
//   - data pgx.TraceConnectStartData
func (_e *ConnectTracer_Expecter) TraceConnectStart(ctx interface{}, data interface{}) *ConnectTracer_TraceConnectStart_Call {
	return &ConnectTracer_TraceConnectStart_Call{Call: _e.mock.On("TraceConnectStart", ctx, data)}
}

func (_c *ConnectTracer_TraceConnectStart_Call) Run(run func(ctx context.Context, data pgx.TraceConnectStartData)) *ConnectTracer_TraceConnectStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.TraceConnectStartData))
	})
	return _c
}

func (_c *ConnectTracer_TraceConnectStart_Call) Return(_a0 context.Context) *ConnectTracer_TraceConnectStart_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewConnectTracer interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnectTracer creates a new instance of ConnectTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnectTracer(t mockConstructorTestingTNewConnectTracer) *ConnectTracer {
	mock := &ConnectTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
