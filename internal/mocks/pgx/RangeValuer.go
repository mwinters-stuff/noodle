// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// RangeValuer is an autogenerated mock type for the RangeValuer type
type RangeValuer struct {
	mock.Mock
}

type RangeValuer_Expecter struct {
	mock *mock.Mock
}

func (_m *RangeValuer) EXPECT() *RangeValuer_Expecter {
	return &RangeValuer_Expecter{mock: &_m.Mock}
}

// BoundTypes provides a mock function with given fields:
func (_m *RangeValuer) BoundTypes() (pgtype.BoundType, pgtype.BoundType) {
	ret := _m.Called()

	var r0 pgtype.BoundType
	if rf, ok := ret.Get(0).(func() pgtype.BoundType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pgtype.BoundType)
	}

	var r1 pgtype.BoundType
	if rf, ok := ret.Get(1).(func() pgtype.BoundType); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(pgtype.BoundType)
	}

	return r0, r1
}

// RangeValuer_BoundTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BoundTypes'
type RangeValuer_BoundTypes_Call struct {
	*mock.Call
}

// BoundTypes is a helper method to define mock.On call
func (_e *RangeValuer_Expecter) BoundTypes() *RangeValuer_BoundTypes_Call {
	return &RangeValuer_BoundTypes_Call{Call: _e.mock.On("BoundTypes")}
}

func (_c *RangeValuer_BoundTypes_Call) Run(run func()) *RangeValuer_BoundTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RangeValuer_BoundTypes_Call) Return(lower pgtype.BoundType, upper pgtype.BoundType) *RangeValuer_BoundTypes_Call {
	_c.Call.Return(lower, upper)
	return _c
}

// Bounds provides a mock function with given fields:
func (_m *RangeValuer) Bounds() (interface{}, interface{}) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func() interface{}); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// RangeValuer_Bounds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bounds'
type RangeValuer_Bounds_Call struct {
	*mock.Call
}

// Bounds is a helper method to define mock.On call
func (_e *RangeValuer_Expecter) Bounds() *RangeValuer_Bounds_Call {
	return &RangeValuer_Bounds_Call{Call: _e.mock.On("Bounds")}
}

func (_c *RangeValuer_Bounds_Call) Run(run func()) *RangeValuer_Bounds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RangeValuer_Bounds_Call) Return(lower interface{}, upper interface{}) *RangeValuer_Bounds_Call {
	_c.Call.Return(lower, upper)
	return _c
}

// IsNull provides a mock function with given fields:
func (_m *RangeValuer) IsNull() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RangeValuer_IsNull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNull'
type RangeValuer_IsNull_Call struct {
	*mock.Call
}

// IsNull is a helper method to define mock.On call
func (_e *RangeValuer_Expecter) IsNull() *RangeValuer_IsNull_Call {
	return &RangeValuer_IsNull_Call{Call: _e.mock.On("IsNull")}
}

func (_c *RangeValuer_IsNull_Call) Run(run func()) *RangeValuer_IsNull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RangeValuer_IsNull_Call) Return(_a0 bool) *RangeValuer_IsNull_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRangeValuer interface {
	mock.TestingT
	Cleanup(func())
}

// NewRangeValuer creates a new instance of RangeValuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRangeValuer(t mockConstructorTestingTNewRangeValuer) *RangeValuer {
	mock := &RangeValuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
