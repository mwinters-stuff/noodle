// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// BoxValuer is an autogenerated mock type for the BoxValuer type
type BoxValuer struct {
	mock.Mock
}

type BoxValuer_Expecter struct {
	mock *mock.Mock
}

func (_m *BoxValuer) EXPECT() *BoxValuer_Expecter {
	return &BoxValuer_Expecter{mock: &_m.Mock}
}

// BoxValue provides a mock function with given fields:
func (_m *BoxValuer) BoxValue() (pgtype.Box, error) {
	ret := _m.Called()

	var r0 pgtype.Box
	if rf, ok := ret.Get(0).(func() pgtype.Box); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pgtype.Box)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BoxValuer_BoxValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BoxValue'
type BoxValuer_BoxValue_Call struct {
	*mock.Call
}

// BoxValue is a helper method to define mock.On call
func (_e *BoxValuer_Expecter) BoxValue() *BoxValuer_BoxValue_Call {
	return &BoxValuer_BoxValue_Call{Call: _e.mock.On("BoxValue")}
}

func (_c *BoxValuer_BoxValue_Call) Run(run func()) *BoxValuer_BoxValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BoxValuer_BoxValue_Call) Return(_a0 pgtype.Box, _a1 error) *BoxValuer_BoxValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewBoxValuer interface {
	mock.TestingT
	Cleanup(func())
}

// NewBoxValuer creates a new instance of BoxValuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBoxValuer(t mockConstructorTestingTNewBoxValuer) *BoxValuer {
	mock := &BoxValuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
