// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// ArrayGetter is an autogenerated mock type for the ArrayGetter type
type ArrayGetter struct {
	mock.Mock
}

type ArrayGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ArrayGetter) EXPECT() *ArrayGetter_Expecter {
	return &ArrayGetter_Expecter{mock: &_m.Mock}
}

// Dimensions provides a mock function with given fields:
func (_m *ArrayGetter) Dimensions() []pgtype.ArrayDimension {
	ret := _m.Called()

	var r0 []pgtype.ArrayDimension
	if rf, ok := ret.Get(0).(func() []pgtype.ArrayDimension); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgtype.ArrayDimension)
		}
	}

	return r0
}

// ArrayGetter_Dimensions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dimensions'
type ArrayGetter_Dimensions_Call struct {
	*mock.Call
}

// Dimensions is a helper method to define mock.On call
func (_e *ArrayGetter_Expecter) Dimensions() *ArrayGetter_Dimensions_Call {
	return &ArrayGetter_Dimensions_Call{Call: _e.mock.On("Dimensions")}
}

func (_c *ArrayGetter_Dimensions_Call) Run(run func()) *ArrayGetter_Dimensions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArrayGetter_Dimensions_Call) Return(_a0 []pgtype.ArrayDimension) *ArrayGetter_Dimensions_Call {
	_c.Call.Return(_a0)
	return _c
}

// Index provides a mock function with given fields: i
func (_m *ArrayGetter) Index(i int) interface{} {
	ret := _m.Called(i)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ArrayGetter_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type ArrayGetter_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - i int
func (_e *ArrayGetter_Expecter) Index(i interface{}) *ArrayGetter_Index_Call {
	return &ArrayGetter_Index_Call{Call: _e.mock.On("Index", i)}
}

func (_c *ArrayGetter_Index_Call) Run(run func(i int)) *ArrayGetter_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ArrayGetter_Index_Call) Return(_a0 interface{}) *ArrayGetter_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

// IndexType provides a mock function with given fields:
func (_m *ArrayGetter) IndexType() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ArrayGetter_IndexType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexType'
type ArrayGetter_IndexType_Call struct {
	*mock.Call
}

// IndexType is a helper method to define mock.On call
func (_e *ArrayGetter_Expecter) IndexType() *ArrayGetter_IndexType_Call {
	return &ArrayGetter_IndexType_Call{Call: _e.mock.On("IndexType")}
}

func (_c *ArrayGetter_IndexType_Call) Run(run func()) *ArrayGetter_IndexType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArrayGetter_IndexType_Call) Return(_a0 interface{}) *ArrayGetter_IndexType_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewArrayGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewArrayGetter creates a new instance of ArrayGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArrayGetter(t mockConstructorTestingTNewArrayGetter) *ArrayGetter {
	mock := &ArrayGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
