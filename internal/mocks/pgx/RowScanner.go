// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// RowScanner is an autogenerated mock type for the RowScanner type
type RowScanner struct {
	mock.Mock
}

type RowScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *RowScanner) EXPECT() *RowScanner_Expecter {
	return &RowScanner_Expecter{mock: &_m.Mock}
}

// ScanRow provides a mock function with given fields: rows
func (_m *RowScanner) ScanRow(rows pgx.Rows) error {
	ret := _m.Called(rows)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.Rows) error); ok {
		r0 = rf(rows)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RowScanner_ScanRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanRow'
type RowScanner_ScanRow_Call struct {
	*mock.Call
}

// ScanRow is a helper method to define mock.On call
//   - rows pgx.Rows
func (_e *RowScanner_Expecter) ScanRow(rows interface{}) *RowScanner_ScanRow_Call {
	return &RowScanner_ScanRow_Call{Call: _e.mock.On("ScanRow", rows)}
}

func (_c *RowScanner_ScanRow_Call) Run(run func(rows pgx.Rows)) *RowScanner_ScanRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgx.Rows))
	})
	return _c
}

func (_c *RowScanner_ScanRow_Call) Return(_a0 error) *RowScanner_ScanRow_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRowScanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewRowScanner creates a new instance of RowScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRowScanner(t mockConstructorTestingTNewRowScanner) *RowScanner {
	mock := &RowScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
