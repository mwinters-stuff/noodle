// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	driver "database/sql/driver"

	mock "github.com/stretchr/testify/mock"
)

// rowValueFunc is an autogenerated mock type for the rowValueFunc type
type rowValueFunc struct {
	mock.Mock
}

type rowValueFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *rowValueFunc) EXPECT() *rowValueFunc_Expecter {
	return &rowValueFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: src
func (_m *rowValueFunc) Execute(src []byte) (driver.Value, error) {
	ret := _m.Called(src)

	var r0 driver.Value
	if rf, ok := ret.Get(0).(func([]byte) driver.Value); ok {
		r0 = rf(src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// rowValueFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type rowValueFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - src []byte
func (_e *rowValueFunc_Expecter) Execute(src interface{}) *rowValueFunc_Execute_Call {
	return &rowValueFunc_Execute_Call{Call: _e.mock.On("Execute", src)}
}

func (_c *rowValueFunc_Execute_Call) Run(run func(src []byte)) *rowValueFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *rowValueFunc_Execute_Call) Return(_a0 driver.Value, _a1 error) *rowValueFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTnewRowValueFunc interface {
	mock.TestingT
	Cleanup(func())
}

// newRowValueFunc creates a new instance of rowValueFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newRowValueFunc(t mockConstructorTestingTnewRowValueFunc) *rowValueFunc {
	mock := &rowValueFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
