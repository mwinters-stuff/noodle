// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// QueryRewriter is an autogenerated mock type for the QueryRewriter type
type QueryRewriter struct {
	mock.Mock
}

type QueryRewriter_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryRewriter) EXPECT() *QueryRewriter_Expecter {
	return &QueryRewriter_Expecter{mock: &_m.Mock}
}

// RewriteQuery provides a mock function with given fields: ctx, conn, sql, args
func (_m *QueryRewriter) RewriteQuery(ctx context.Context, conn *pgx.Conn, sql string, args []interface{}) (string, []interface{}, error) {
	ret := _m.Called(ctx, conn, sql, args)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Conn, string, []interface{}) string); ok {
		r0 = rf(ctx, conn, sql, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 []interface{}
	if rf, ok := ret.Get(1).(func(context.Context, *pgx.Conn, string, []interface{}) []interface{}); ok {
		r1 = rf(ctx, conn, sql, args)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *pgx.Conn, string, []interface{}) error); ok {
		r2 = rf(ctx, conn, sql, args)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// QueryRewriter_RewriteQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RewriteQuery'
type QueryRewriter_RewriteQuery_Call struct {
	*mock.Call
}

// RewriteQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - sql string
//   - args []interface{}
func (_e *QueryRewriter_Expecter) RewriteQuery(ctx interface{}, conn interface{}, sql interface{}, args interface{}) *QueryRewriter_RewriteQuery_Call {
	return &QueryRewriter_RewriteQuery_Call{Call: _e.mock.On("RewriteQuery", ctx, conn, sql, args)}
}

func (_c *QueryRewriter_RewriteQuery_Call) Run(run func(ctx context.Context, conn *pgx.Conn, sql string, args []interface{})) *QueryRewriter_RewriteQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(string), args[3].([]interface{}))
	})
	return _c
}

func (_c *QueryRewriter_RewriteQuery_Call) Return(newSQL string, newArgs []interface{}, err error) *QueryRewriter_RewriteQuery_Call {
	_c.Call.Return(newSQL, newArgs, err)
	return _c
}

type mockConstructorTestingTNewQueryRewriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryRewriter creates a new instance of QueryRewriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryRewriter(t mockConstructorTestingTNewQueryRewriter) *QueryRewriter {
	mock := &QueryRewriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
