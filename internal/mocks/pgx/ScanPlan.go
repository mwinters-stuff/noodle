// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ScanPlan is an autogenerated mock type for the ScanPlan type
type ScanPlan struct {
	mock.Mock
}

type ScanPlan_Expecter struct {
	mock *mock.Mock
}

func (_m *ScanPlan) EXPECT() *ScanPlan_Expecter {
	return &ScanPlan_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function with given fields: src, target
func (_m *ScanPlan) Scan(src []byte, target interface{}) error {
	ret := _m.Called(src, target)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(src, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanPlan_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type ScanPlan_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - src []byte
//   - target interface{}
func (_e *ScanPlan_Expecter) Scan(src interface{}, target interface{}) *ScanPlan_Scan_Call {
	return &ScanPlan_Scan_Call{Call: _e.mock.On("Scan", src, target)}
}

func (_c *ScanPlan_Scan_Call) Run(run func(src []byte, target interface{})) *ScanPlan_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(interface{}))
	})
	return _c
}

func (_c *ScanPlan_Scan_Call) Return(_a0 error) *ScanPlan_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewScanPlan interface {
	mock.TestingT
	Cleanup(func())
}

// NewScanPlan creates a new instance of ScanPlan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScanPlan(t mockConstructorTestingTNewScanPlan) *ScanPlan {
	mock := &ScanPlan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
