// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// NotificationHandler is an autogenerated mock type for the NotificationHandler type
type NotificationHandler struct {
	mock.Mock
}

type NotificationHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationHandler) EXPECT() *NotificationHandler_Expecter {
	return &NotificationHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *NotificationHandler) Execute(_a0 *pgconn.PgConn, _a1 *pgconn.Notification) {
	_m.Called(_a0, _a1)
}

// NotificationHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type NotificationHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *pgconn.PgConn
//   - _a1 *pgconn.Notification
func (_e *NotificationHandler_Expecter) Execute(_a0 interface{}, _a1 interface{}) *NotificationHandler_Execute_Call {
	return &NotificationHandler_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *NotificationHandler_Execute_Call) Run(run func(_a0 *pgconn.PgConn, _a1 *pgconn.Notification)) *NotificationHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pgconn.PgConn), args[1].(*pgconn.Notification))
	})
	return _c
}

func (_c *NotificationHandler_Execute_Call) Return() *NotificationHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewNotificationHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationHandler creates a new instance of NotificationHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationHandler(t mockConstructorTestingTNewNotificationHandler) *NotificationHandler {
	mock := &NotificationHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
