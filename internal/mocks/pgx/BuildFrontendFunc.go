// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"

	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
)

// BuildFrontendFunc is an autogenerated mock type for the BuildFrontendFunc type
type BuildFrontendFunc struct {
	mock.Mock
}

type BuildFrontendFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *BuildFrontendFunc) EXPECT() *BuildFrontendFunc_Expecter {
	return &BuildFrontendFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: r, w
func (_m *BuildFrontendFunc) Execute(r io.Reader, w io.Writer) *pgproto3.Frontend {
	ret := _m.Called(r, w)

	var r0 *pgproto3.Frontend
	if rf, ok := ret.Get(0).(func(io.Reader, io.Writer) *pgproto3.Frontend); ok {
		r0 = rf(r, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgproto3.Frontend)
		}
	}

	return r0
}

// BuildFrontendFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type BuildFrontendFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - r io.Reader
//   - w io.Writer
func (_e *BuildFrontendFunc_Expecter) Execute(r interface{}, w interface{}) *BuildFrontendFunc_Execute_Call {
	return &BuildFrontendFunc_Execute_Call{Call: _e.mock.On("Execute", r, w)}
}

func (_c *BuildFrontendFunc_Execute_Call) Run(run func(r io.Reader, w io.Writer)) *BuildFrontendFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Reader), args[1].(io.Writer))
	})
	return _c
}

func (_c *BuildFrontendFunc_Execute_Call) Return(_a0 *pgproto3.Frontend) *BuildFrontendFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewBuildFrontendFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewBuildFrontendFunc creates a new instance of BuildFrontendFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBuildFrontendFunc(t mockConstructorTestingTNewBuildFrontendFunc) *BuildFrontendFunc {
	mock := &BuildFrontendFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
