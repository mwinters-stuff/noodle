// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// TextScanner is an autogenerated mock type for the TextScanner type
type TextScanner struct {
	mock.Mock
}

type TextScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *TextScanner) EXPECT() *TextScanner_Expecter {
	return &TextScanner_Expecter{mock: &_m.Mock}
}

// ScanText provides a mock function with given fields: v
func (_m *TextScanner) ScanText(v pgtype.Text) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgtype.Text) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TextScanner_ScanText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanText'
type TextScanner_ScanText_Call struct {
	*mock.Call
}

// ScanText is a helper method to define mock.On call
//   - v pgtype.Text
func (_e *TextScanner_Expecter) ScanText(v interface{}) *TextScanner_ScanText_Call {
	return &TextScanner_ScanText_Call{Call: _e.mock.On("ScanText", v)}
}

func (_c *TextScanner_ScanText_Call) Run(run func(v pgtype.Text)) *TextScanner_ScanText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgtype.Text))
	})
	return _c
}

func (_c *TextScanner_ScanText_Call) Return(_a0 error) *TextScanner_ScanText_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTextScanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewTextScanner creates a new instance of TextScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTextScanner(t mockConstructorTestingTNewTextScanner) *TextScanner {
	mock := &TextScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
