// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// CollectableRow is an autogenerated mock type for the CollectableRow type
type CollectableRow struct {
	mock.Mock
}

type CollectableRow_Expecter struct {
	mock *mock.Mock
}

func (_m *CollectableRow) EXPECT() *CollectableRow_Expecter {
	return &CollectableRow_Expecter{mock: &_m.Mock}
}

// FieldDescriptions provides a mock function with given fields:
func (_m *CollectableRow) FieldDescriptions() []pgconn.FieldDescription {
	ret := _m.Called()

	var r0 []pgconn.FieldDescription
	if rf, ok := ret.Get(0).(func() []pgconn.FieldDescription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pgconn.FieldDescription)
		}
	}

	return r0
}

// CollectableRow_FieldDescriptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FieldDescriptions'
type CollectableRow_FieldDescriptions_Call struct {
	*mock.Call
}

// FieldDescriptions is a helper method to define mock.On call
func (_e *CollectableRow_Expecter) FieldDescriptions() *CollectableRow_FieldDescriptions_Call {
	return &CollectableRow_FieldDescriptions_Call{Call: _e.mock.On("FieldDescriptions")}
}

func (_c *CollectableRow_FieldDescriptions_Call) Run(run func()) *CollectableRow_FieldDescriptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollectableRow_FieldDescriptions_Call) Return(_a0 []pgconn.FieldDescription) *CollectableRow_FieldDescriptions_Call {
	_c.Call.Return(_a0)
	return _c
}

// RawValues provides a mock function with given fields:
func (_m *CollectableRow) RawValues() [][]byte {
	ret := _m.Called()

	var r0 [][]byte
	if rf, ok := ret.Get(0).(func() [][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]byte)
		}
	}

	return r0
}

// CollectableRow_RawValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawValues'
type CollectableRow_RawValues_Call struct {
	*mock.Call
}

// RawValues is a helper method to define mock.On call
func (_e *CollectableRow_Expecter) RawValues() *CollectableRow_RawValues_Call {
	return &CollectableRow_RawValues_Call{Call: _e.mock.On("RawValues")}
}

func (_c *CollectableRow_RawValues_Call) Run(run func()) *CollectableRow_RawValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollectableRow_RawValues_Call) Return(_a0 [][]byte) *CollectableRow_RawValues_Call {
	_c.Call.Return(_a0)
	return _c
}

// Scan provides a mock function with given fields: dest
func (_m *CollectableRow) Scan(dest ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, dest...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(dest...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CollectableRow_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type CollectableRow_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - dest ...interface{}
func (_e *CollectableRow_Expecter) Scan(dest ...interface{}) *CollectableRow_Scan_Call {
	return &CollectableRow_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, dest...)...)}
}

func (_c *CollectableRow_Scan_Call) Run(run func(dest ...interface{})) *CollectableRow_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *CollectableRow_Scan_Call) Return(_a0 error) *CollectableRow_Scan_Call {
	_c.Call.Return(_a0)
	return _c
}

// Values provides a mock function with given fields:
func (_m *CollectableRow) Values() ([]interface{}, error) {
	ret := _m.Called()

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CollectableRow_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type CollectableRow_Values_Call struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
func (_e *CollectableRow_Expecter) Values() *CollectableRow_Values_Call {
	return &CollectableRow_Values_Call{Call: _e.mock.On("Values")}
}

func (_c *CollectableRow_Values_Call) Run(run func()) *CollectableRow_Values_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CollectableRow_Values_Call) Return(_a0 []interface{}, _a1 error) *CollectableRow_Values_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCollectableRow interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectableRow creates a new instance of CollectableRow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectableRow(t mockConstructorTestingTNewCollectableRow) *CollectableRow {
	mock := &CollectableRow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
