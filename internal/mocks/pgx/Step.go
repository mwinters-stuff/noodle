// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	pgproto3 "github.com/jackc/pgx/v5/pgproto3"
)

// Step is an autogenerated mock type for the Step type
type Step struct {
	mock.Mock
}

type Step_Expecter struct {
	mock *mock.Mock
}

func (_m *Step) EXPECT() *Step_Expecter {
	return &Step_Expecter{mock: &_m.Mock}
}

// Step provides a mock function with given fields: _a0
func (_m *Step) Step(_a0 *pgproto3.Backend) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pgproto3.Backend) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Step_Step_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Step'
type Step_Step_Call struct {
	*mock.Call
}

// Step is a helper method to define mock.On call
//   - _a0 *pgproto3.Backend
func (_e *Step_Expecter) Step(_a0 interface{}) *Step_Step_Call {
	return &Step_Step_Call{Call: _e.mock.On("Step", _a0)}
}

func (_c *Step_Step_Call) Run(run func(_a0 *pgproto3.Backend)) *Step_Step_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pgproto3.Backend))
	})
	return _c
}

func (_c *Step_Step_Call) Return(_a0 error) *Step_Step_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewStep interface {
	mock.TestingT
	Cleanup(func())
}

// NewStep creates a new instance of Step. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStep(t mockConstructorTestingTNewStep) *Step {
	mock := &Step{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
