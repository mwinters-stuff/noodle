// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// LineValuer is an autogenerated mock type for the LineValuer type
type LineValuer struct {
	mock.Mock
}

type LineValuer_Expecter struct {
	mock *mock.Mock
}

func (_m *LineValuer) EXPECT() *LineValuer_Expecter {
	return &LineValuer_Expecter{mock: &_m.Mock}
}

// LineValue provides a mock function with given fields:
func (_m *LineValuer) LineValue() (pgtype.Line, error) {
	ret := _m.Called()

	var r0 pgtype.Line
	if rf, ok := ret.Get(0).(func() pgtype.Line); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pgtype.Line)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LineValuer_LineValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LineValue'
type LineValuer_LineValue_Call struct {
	*mock.Call
}

// LineValue is a helper method to define mock.On call
func (_e *LineValuer_Expecter) LineValue() *LineValuer_LineValue_Call {
	return &LineValuer_LineValue_Call{Call: _e.mock.On("LineValue")}
}

func (_c *LineValuer_LineValue_Call) Run(run func()) *LineValuer_LineValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LineValuer_LineValue_Call) Return(_a0 pgtype.Line, _a1 error) *LineValuer_LineValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewLineValuer interface {
	mock.TestingT
	Cleanup(func())
}

// NewLineValuer creates a new instance of LineValuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLineValuer(t mockConstructorTestingTNewLineValuer) *LineValuer {
	mock := &LineValuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
