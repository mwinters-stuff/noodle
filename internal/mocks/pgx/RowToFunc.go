// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// RowToFunc is an autogenerated mock type for the RowToFunc type
type RowToFunc[T interface{}] struct {
	mock.Mock
}

type RowToFunc_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *RowToFunc[T]) EXPECT() *RowToFunc_Expecter[T] {
	return &RowToFunc_Expecter[T]{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: row
func (_m *RowToFunc[T]) Execute(row pgx.CollectableRow) (T, error) {
	ret := _m.Called(row)

	var r0 T
	if rf, ok := ret.Get(0).(func(pgx.CollectableRow) T); ok {
		r0 = rf(row)
	} else {
		r0 = ret.Get(0).(T)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(pgx.CollectableRow) error); ok {
		r1 = rf(row)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RowToFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type RowToFunc_Execute_Call[T interface{}] struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - row pgx.CollectableRow
func (_e *RowToFunc_Expecter[T]) Execute(row interface{}) *RowToFunc_Execute_Call[T] {
	return &RowToFunc_Execute_Call[T]{Call: _e.mock.On("Execute", row)}
}

func (_c *RowToFunc_Execute_Call[T]) Run(run func(row pgx.CollectableRow)) *RowToFunc_Execute_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgx.CollectableRow))
	})
	return _c
}

func (_c *RowToFunc_Execute_Call[T]) Return(_a0 T, _a1 error) *RowToFunc_Execute_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRowToFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewRowToFunc creates a new instance of RowToFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRowToFunc[T interface{}](t mockConstructorTestingTNewRowToFunc) *RowToFunc[T] {
	mock := &RowToFunc[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
