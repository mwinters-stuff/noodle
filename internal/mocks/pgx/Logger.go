// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	tracelog "github.com/jackc/pgx/v5/tracelog"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Log provides a mock function with given fields: ctx, level, msg, data
func (_m *Logger) Log(ctx context.Context, level tracelog.LogLevel, msg string, data map[string]interface{}) {
	_m.Called(ctx, level, msg, data)
}

// Logger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type Logger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - ctx context.Context
//   - level tracelog.LogLevel
//   - msg string
//   - data map[string]interface{}
func (_e *Logger_Expecter) Log(ctx interface{}, level interface{}, msg interface{}, data interface{}) *Logger_Log_Call {
	return &Logger_Log_Call{Call: _e.mock.On("Log", ctx, level, msg, data)}
}

func (_c *Logger_Log_Call) Run(run func(ctx context.Context, level tracelog.LogLevel, msg string, data map[string]interface{})) *Logger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tracelog.LogLevel), args[2].(string), args[3].(map[string]interface{}))
	})
	return _c
}

func (_c *Logger_Log_Call) Return() *Logger_Log_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewLogger interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t mockConstructorTestingTNewLogger) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
