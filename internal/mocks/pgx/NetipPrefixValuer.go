// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	netip "net/netip"

	mock "github.com/stretchr/testify/mock"
)

// NetipPrefixValuer is an autogenerated mock type for the NetipPrefixValuer type
type NetipPrefixValuer struct {
	mock.Mock
}

type NetipPrefixValuer_Expecter struct {
	mock *mock.Mock
}

func (_m *NetipPrefixValuer) EXPECT() *NetipPrefixValuer_Expecter {
	return &NetipPrefixValuer_Expecter{mock: &_m.Mock}
}

// NetipPrefixValue provides a mock function with given fields:
func (_m *NetipPrefixValuer) NetipPrefixValue() (netip.Prefix, error) {
	ret := _m.Called()

	var r0 netip.Prefix
	if rf, ok := ret.Get(0).(func() netip.Prefix); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(netip.Prefix)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetipPrefixValuer_NetipPrefixValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetipPrefixValue'
type NetipPrefixValuer_NetipPrefixValue_Call struct {
	*mock.Call
}

// NetipPrefixValue is a helper method to define mock.On call
func (_e *NetipPrefixValuer_Expecter) NetipPrefixValue() *NetipPrefixValuer_NetipPrefixValue_Call {
	return &NetipPrefixValuer_NetipPrefixValue_Call{Call: _e.mock.On("NetipPrefixValue")}
}

func (_c *NetipPrefixValuer_NetipPrefixValue_Call) Run(run func()) *NetipPrefixValuer_NetipPrefixValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NetipPrefixValuer_NetipPrefixValue_Call) Return(_a0 netip.Prefix, _a1 error) *NetipPrefixValuer_NetipPrefixValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewNetipPrefixValuer interface {
	mock.TestingT
	Cleanup(func())
}

// NewNetipPrefixValuer creates a new instance of NetipPrefixValuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetipPrefixValuer(t mockConstructorTestingTNewNetipPrefixValuer) *NetipPrefixValuer {
	mock := &NetipPrefixValuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
