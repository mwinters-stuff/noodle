// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// BoxScanner is an autogenerated mock type for the BoxScanner type
type BoxScanner struct {
	mock.Mock
}

type BoxScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *BoxScanner) EXPECT() *BoxScanner_Expecter {
	return &BoxScanner_Expecter{mock: &_m.Mock}
}

// ScanBox provides a mock function with given fields: v
func (_m *BoxScanner) ScanBox(v pgtype.Box) error {
	ret := _m.Called(v)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgtype.Box) error); ok {
		r0 = rf(v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BoxScanner_ScanBox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanBox'
type BoxScanner_ScanBox_Call struct {
	*mock.Call
}

// ScanBox is a helper method to define mock.On call
//   - v pgtype.Box
func (_e *BoxScanner_Expecter) ScanBox(v interface{}) *BoxScanner_ScanBox_Call {
	return &BoxScanner_ScanBox_Call{Call: _e.mock.On("ScanBox", v)}
}

func (_c *BoxScanner_ScanBox_Call) Run(run func(v pgtype.Box)) *BoxScanner_ScanBox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgtype.Box))
	})
	return _c
}

func (_c *BoxScanner_ScanBox_Call) Return(_a0 error) *BoxScanner_ScanBox_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewBoxScanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewBoxScanner creates a new instance of BoxScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBoxScanner(t mockConstructorTestingTNewBoxScanner) *BoxScanner {
	mock := &BoxScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
