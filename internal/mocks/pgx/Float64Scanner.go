// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// Float64Scanner is an autogenerated mock type for the Float64Scanner type
type Float64Scanner struct {
	mock.Mock
}

type Float64Scanner_Expecter struct {
	mock *mock.Mock
}

func (_m *Float64Scanner) EXPECT() *Float64Scanner_Expecter {
	return &Float64Scanner_Expecter{mock: &_m.Mock}
}

// ScanFloat64 provides a mock function with given fields: _a0
func (_m *Float64Scanner) ScanFloat64(_a0 pgtype.Float8) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgtype.Float8) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Float64Scanner_ScanFloat64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanFloat64'
type Float64Scanner_ScanFloat64_Call struct {
	*mock.Call
}

// ScanFloat64 is a helper method to define mock.On call
//   - _a0 pgtype.Float8
func (_e *Float64Scanner_Expecter) ScanFloat64(_a0 interface{}) *Float64Scanner_ScanFloat64_Call {
	return &Float64Scanner_ScanFloat64_Call{Call: _e.mock.On("ScanFloat64", _a0)}
}

func (_c *Float64Scanner_ScanFloat64_Call) Run(run func(_a0 pgtype.Float8)) *Float64Scanner_ScanFloat64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgtype.Float8))
	})
	return _c
}

func (_c *Float64Scanner_ScanFloat64_Call) Return(_a0 error) *Float64Scanner_ScanFloat64_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewFloat64Scanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewFloat64Scanner creates a new instance of Float64Scanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFloat64Scanner(t mockConstructorTestingTNewFloat64Scanner) *Float64Scanner {
	mock := &Float64Scanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
