// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// Int64Scanner is an autogenerated mock type for the Int64Scanner type
type Int64Scanner struct {
	mock.Mock
}

type Int64Scanner_Expecter struct {
	mock *mock.Mock
}

func (_m *Int64Scanner) EXPECT() *Int64Scanner_Expecter {
	return &Int64Scanner_Expecter{mock: &_m.Mock}
}

// ScanInt64 provides a mock function with given fields: _a0
func (_m *Int64Scanner) ScanInt64(_a0 pgtype.Int8) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgtype.Int8) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Int64Scanner_ScanInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanInt64'
type Int64Scanner_ScanInt64_Call struct {
	*mock.Call
}

// ScanInt64 is a helper method to define mock.On call
//   - _a0 pgtype.Int8
func (_e *Int64Scanner_Expecter) ScanInt64(_a0 interface{}) *Int64Scanner_ScanInt64_Call {
	return &Int64Scanner_ScanInt64_Call{Call: _e.mock.On("ScanInt64", _a0)}
}

func (_c *Int64Scanner_ScanInt64_Call) Run(run func(_a0 pgtype.Int8)) *Int64Scanner_ScanInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgtype.Int8))
	})
	return _c
}

func (_c *Int64Scanner_ScanInt64_Call) Return(_a0 error) *Int64Scanner_ScanInt64_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewInt64Scanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewInt64Scanner creates a new instance of Int64Scanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInt64Scanner(t mockConstructorTestingTNewInt64Scanner) *Int64Scanner {
	mock := &Int64Scanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
