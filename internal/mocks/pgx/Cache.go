// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// Cap provides a mock function with given fields:
func (_m *Cache) Cap() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Cache_Cap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cap'
type Cache_Cap_Call struct {
	*mock.Call
}

// Cap is a helper method to define mock.On call
func (_e *Cache_Expecter) Cap() *Cache_Cap_Call {
	return &Cache_Cap_Call{Call: _e.mock.On("Cap")}
}

func (_c *Cache_Cap_Call) Run(run func()) *Cache_Cap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_Cap_Call) Return(_a0 int) *Cache_Cap_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: sql
func (_m *Cache) Get(sql string) *pgconn.StatementDescription {
	ret := _m.Called(sql)

	var r0 *pgconn.StatementDescription
	if rf, ok := ret.Get(0).(func(string) *pgconn.StatementDescription); ok {
		r0 = rf(sql)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgconn.StatementDescription)
		}
	}

	return r0
}

// Cache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Cache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - sql string
func (_e *Cache_Expecter) Get(sql interface{}) *Cache_Get_Call {
	return &Cache_Get_Call{Call: _e.mock.On("Get", sql)}
}

func (_c *Cache_Get_Call) Run(run func(sql string)) *Cache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Cache_Get_Call) Return(_a0 *pgconn.StatementDescription) *Cache_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

// HandleInvalidated provides a mock function with given fields:
func (_m *Cache) HandleInvalidated() []*pgconn.StatementDescription {
	ret := _m.Called()

	var r0 []*pgconn.StatementDescription
	if rf, ok := ret.Get(0).(func() []*pgconn.StatementDescription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pgconn.StatementDescription)
		}
	}

	return r0
}

// Cache_HandleInvalidated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleInvalidated'
type Cache_HandleInvalidated_Call struct {
	*mock.Call
}

// HandleInvalidated is a helper method to define mock.On call
func (_e *Cache_Expecter) HandleInvalidated() *Cache_HandleInvalidated_Call {
	return &Cache_HandleInvalidated_Call{Call: _e.mock.On("HandleInvalidated")}
}

func (_c *Cache_HandleInvalidated_Call) Run(run func()) *Cache_HandleInvalidated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_HandleInvalidated_Call) Return(_a0 []*pgconn.StatementDescription) *Cache_HandleInvalidated_Call {
	_c.Call.Return(_a0)
	return _c
}

// Invalidate provides a mock function with given fields: sql
func (_m *Cache) Invalidate(sql string) {
	_m.Called(sql)
}

// Cache_Invalidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invalidate'
type Cache_Invalidate_Call struct {
	*mock.Call
}

// Invalidate is a helper method to define mock.On call
//   - sql string
func (_e *Cache_Expecter) Invalidate(sql interface{}) *Cache_Invalidate_Call {
	return &Cache_Invalidate_Call{Call: _e.mock.On("Invalidate", sql)}
}

func (_c *Cache_Invalidate_Call) Run(run func(sql string)) *Cache_Invalidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Cache_Invalidate_Call) Return() *Cache_Invalidate_Call {
	_c.Call.Return()
	return _c
}

// InvalidateAll provides a mock function with given fields:
func (_m *Cache) InvalidateAll() {
	_m.Called()
}

// Cache_InvalidateAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidateAll'
type Cache_InvalidateAll_Call struct {
	*mock.Call
}

// InvalidateAll is a helper method to define mock.On call
func (_e *Cache_Expecter) InvalidateAll() *Cache_InvalidateAll_Call {
	return &Cache_InvalidateAll_Call{Call: _e.mock.On("InvalidateAll")}
}

func (_c *Cache_InvalidateAll_Call) Run(run func()) *Cache_InvalidateAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_InvalidateAll_Call) Return() *Cache_InvalidateAll_Call {
	_c.Call.Return()
	return _c
}

// Len provides a mock function with given fields:
func (_m *Cache) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Cache_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type Cache_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *Cache_Expecter) Len() *Cache_Len_Call {
	return &Cache_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *Cache_Len_Call) Run(run func()) *Cache_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Cache_Len_Call) Return(_a0 int) *Cache_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

// Put provides a mock function with given fields: sd
func (_m *Cache) Put(sd *pgconn.StatementDescription) {
	_m.Called(sd)
}

// Cache_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type Cache_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - sd *pgconn.StatementDescription
func (_e *Cache_Expecter) Put(sd interface{}) *Cache_Put_Call {
	return &Cache_Put_Call{Call: _e.mock.On("Put", sd)}
}

func (_c *Cache_Put_Call) Run(run func(sd *pgconn.StatementDescription)) *Cache_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pgconn.StatementDescription))
	})
	return _c
}

func (_c *Cache_Put_Call) Return() *Cache_Put_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCache(t mockConstructorTestingTNewCache) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
