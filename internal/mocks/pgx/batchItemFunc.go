// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// batchItemFunc is an autogenerated mock type for the batchItemFunc type
type batchItemFunc struct {
	mock.Mock
}

type batchItemFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *batchItemFunc) EXPECT() *batchItemFunc_Expecter {
	return &batchItemFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: br
func (_m *batchItemFunc) Execute(br pgx.BatchResults) error {
	ret := _m.Called(br)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgx.BatchResults) error); ok {
		r0 = rf(br)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// batchItemFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type batchItemFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - br pgx.BatchResults
func (_e *batchItemFunc_Expecter) Execute(br interface{}) *batchItemFunc_Execute_Call {
	return &batchItemFunc_Execute_Call{Call: _e.mock.On("Execute", br)}
}

func (_c *batchItemFunc_Execute_Call) Run(run func(br pgx.BatchResults)) *batchItemFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgx.BatchResults))
	})
	return _c
}

func (_c *batchItemFunc_Execute_Call) Return(_a0 error) *batchItemFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewBatchItemFunc interface {
	mock.TestingT
	Cleanup(func())
}

// newBatchItemFunc creates a new instance of batchItemFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newBatchItemFunc(t mockConstructorTestingTnewBatchItemFunc) *batchItemFunc {
	mock := &batchItemFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
