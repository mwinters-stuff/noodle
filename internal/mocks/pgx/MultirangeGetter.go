// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MultirangeGetter is an autogenerated mock type for the MultirangeGetter type
type MultirangeGetter struct {
	mock.Mock
}

type MultirangeGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MultirangeGetter) EXPECT() *MultirangeGetter_Expecter {
	return &MultirangeGetter_Expecter{mock: &_m.Mock}
}

// Index provides a mock function with given fields: i
func (_m *MultirangeGetter) Index(i int) interface{} {
	ret := _m.Called(i)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MultirangeGetter_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MultirangeGetter_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - i int
func (_e *MultirangeGetter_Expecter) Index(i interface{}) *MultirangeGetter_Index_Call {
	return &MultirangeGetter_Index_Call{Call: _e.mock.On("Index", i)}
}

func (_c *MultirangeGetter_Index_Call) Run(run func(i int)) *MultirangeGetter_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MultirangeGetter_Index_Call) Return(_a0 interface{}) *MultirangeGetter_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

// IndexType provides a mock function with given fields:
func (_m *MultirangeGetter) IndexType() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MultirangeGetter_IndexType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexType'
type MultirangeGetter_IndexType_Call struct {
	*mock.Call
}

// IndexType is a helper method to define mock.On call
func (_e *MultirangeGetter_Expecter) IndexType() *MultirangeGetter_IndexType_Call {
	return &MultirangeGetter_IndexType_Call{Call: _e.mock.On("IndexType")}
}

func (_c *MultirangeGetter_IndexType_Call) Run(run func()) *MultirangeGetter_IndexType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MultirangeGetter_IndexType_Call) Return(_a0 interface{}) *MultirangeGetter_IndexType_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsNull provides a mock function with given fields:
func (_m *MultirangeGetter) IsNull() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MultirangeGetter_IsNull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNull'
type MultirangeGetter_IsNull_Call struct {
	*mock.Call
}

// IsNull is a helper method to define mock.On call
func (_e *MultirangeGetter_Expecter) IsNull() *MultirangeGetter_IsNull_Call {
	return &MultirangeGetter_IsNull_Call{Call: _e.mock.On("IsNull")}
}

func (_c *MultirangeGetter_IsNull_Call) Run(run func()) *MultirangeGetter_IsNull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MultirangeGetter_IsNull_Call) Return(_a0 bool) *MultirangeGetter_IsNull_Call {
	_c.Call.Return(_a0)
	return _c
}

// Len provides a mock function with given fields:
func (_m *MultirangeGetter) Len() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MultirangeGetter_Len_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Len'
type MultirangeGetter_Len_Call struct {
	*mock.Call
}

// Len is a helper method to define mock.On call
func (_e *MultirangeGetter_Expecter) Len() *MultirangeGetter_Len_Call {
	return &MultirangeGetter_Len_Call{Call: _e.mock.On("Len")}
}

func (_c *MultirangeGetter_Len_Call) Run(run func()) *MultirangeGetter_Len_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MultirangeGetter_Len_Call) Return(_a0 int) *MultirangeGetter_Len_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMultirangeGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMultirangeGetter creates a new instance of MultirangeGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMultirangeGetter(t mockConstructorTestingTNewMultirangeGetter) *MultirangeGetter {
	mock := &MultirangeGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
