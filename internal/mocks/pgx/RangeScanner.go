// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// RangeScanner is an autogenerated mock type for the RangeScanner type
type RangeScanner struct {
	mock.Mock
}

type RangeScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *RangeScanner) EXPECT() *RangeScanner_Expecter {
	return &RangeScanner_Expecter{mock: &_m.Mock}
}

// ScanBounds provides a mock function with given fields:
func (_m *RangeScanner) ScanBounds() (interface{}, interface{}) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func() interface{}); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// RangeScanner_ScanBounds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanBounds'
type RangeScanner_ScanBounds_Call struct {
	*mock.Call
}

// ScanBounds is a helper method to define mock.On call
func (_e *RangeScanner_Expecter) ScanBounds() *RangeScanner_ScanBounds_Call {
	return &RangeScanner_ScanBounds_Call{Call: _e.mock.On("ScanBounds")}
}

func (_c *RangeScanner_ScanBounds_Call) Run(run func()) *RangeScanner_ScanBounds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RangeScanner_ScanBounds_Call) Return(lowerTarget interface{}, upperTarget interface{}) *RangeScanner_ScanBounds_Call {
	_c.Call.Return(lowerTarget, upperTarget)
	return _c
}

// ScanNull provides a mock function with given fields:
func (_m *RangeScanner) ScanNull() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RangeScanner_ScanNull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanNull'
type RangeScanner_ScanNull_Call struct {
	*mock.Call
}

// ScanNull is a helper method to define mock.On call
func (_e *RangeScanner_Expecter) ScanNull() *RangeScanner_ScanNull_Call {
	return &RangeScanner_ScanNull_Call{Call: _e.mock.On("ScanNull")}
}

func (_c *RangeScanner_ScanNull_Call) Run(run func()) *RangeScanner_ScanNull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RangeScanner_ScanNull_Call) Return(_a0 error) *RangeScanner_ScanNull_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetBoundTypes provides a mock function with given fields: lower, upper
func (_m *RangeScanner) SetBoundTypes(lower pgtype.BoundType, upper pgtype.BoundType) error {
	ret := _m.Called(lower, upper)

	var r0 error
	if rf, ok := ret.Get(0).(func(pgtype.BoundType, pgtype.BoundType) error); ok {
		r0 = rf(lower, upper)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RangeScanner_SetBoundTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBoundTypes'
type RangeScanner_SetBoundTypes_Call struct {
	*mock.Call
}

// SetBoundTypes is a helper method to define mock.On call
//   - lower pgtype.BoundType
//   - upper pgtype.BoundType
func (_e *RangeScanner_Expecter) SetBoundTypes(lower interface{}, upper interface{}) *RangeScanner_SetBoundTypes_Call {
	return &RangeScanner_SetBoundTypes_Call{Call: _e.mock.On("SetBoundTypes", lower, upper)}
}

func (_c *RangeScanner_SetBoundTypes_Call) Run(run func(lower pgtype.BoundType, upper pgtype.BoundType)) *RangeScanner_SetBoundTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(pgtype.BoundType), args[1].(pgtype.BoundType))
	})
	return _c
}

func (_c *RangeScanner_SetBoundTypes_Call) Return(_a0 error) *RangeScanner_SetBoundTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRangeScanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewRangeScanner creates a new instance of RangeScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRangeScanner(t mockConstructorTestingTNewRangeScanner) *RangeScanner {
	mock := &RangeScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
