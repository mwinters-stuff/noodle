// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// NewGSSFunc is an autogenerated mock type for the NewGSSFunc type
type NewGSSFunc struct {
	mock.Mock
}

type NewGSSFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *NewGSSFunc) EXPECT() *NewGSSFunc_Expecter {
	return &NewGSSFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *NewGSSFunc) Execute() (pgconn.GSS, error) {
	ret := _m.Called()

	var r0 pgconn.GSS
	if rf, ok := ret.Get(0).(func() pgconn.GSS); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgconn.GSS)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGSSFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type NewGSSFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *NewGSSFunc_Expecter) Execute() *NewGSSFunc_Execute_Call {
	return &NewGSSFunc_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *NewGSSFunc_Execute_Call) Run(run func()) *NewGSSFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *NewGSSFunc_Execute_Call) Return(_a0 pgconn.GSS, _a1 error) *NewGSSFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewNewGSSFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewNewGSSFunc creates a new instance of NewGSSFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNewGSSFunc(t mockConstructorTestingTNewNewGSSFunc) *NewGSSFunc {
	mock := &NewGSSFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
