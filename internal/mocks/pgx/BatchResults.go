// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgconn "github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// BatchResults is an autogenerated mock type for the BatchResults type
type BatchResults struct {
	mock.Mock
}

type BatchResults_Expecter struct {
	mock *mock.Mock
}

func (_m *BatchResults) EXPECT() *BatchResults_Expecter {
	return &BatchResults_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *BatchResults) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BatchResults_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type BatchResults_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *BatchResults_Expecter) Close() *BatchResults_Close_Call {
	return &BatchResults_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *BatchResults_Close_Call) Run(run func()) *BatchResults_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BatchResults_Close_Call) Return(_a0 error) *BatchResults_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// Exec provides a mock function with given fields:
func (_m *BatchResults) Exec() (pgconn.CommandTag, error) {
	ret := _m.Called()

	var r0 pgconn.CommandTag
	if rf, ok := ret.Get(0).(func() pgconn.CommandTag); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchResults_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type BatchResults_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
func (_e *BatchResults_Expecter) Exec() *BatchResults_Exec_Call {
	return &BatchResults_Exec_Call{Call: _e.mock.On("Exec")}
}

func (_c *BatchResults_Exec_Call) Run(run func()) *BatchResults_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BatchResults_Exec_Call) Return(_a0 pgconn.CommandTag, _a1 error) *BatchResults_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Query provides a mock function with given fields:
func (_m *BatchResults) Query() (pgx.Rows, error) {
	ret := _m.Called()

	var r0 pgx.Rows
	if rf, ok := ret.Get(0).(func() pgx.Rows); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchResults_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type BatchResults_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
func (_e *BatchResults_Expecter) Query() *BatchResults_Query_Call {
	return &BatchResults_Query_Call{Call: _e.mock.On("Query")}
}

func (_c *BatchResults_Query_Call) Run(run func()) *BatchResults_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BatchResults_Query_Call) Return(_a0 pgx.Rows, _a1 error) *BatchResults_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QueryRow provides a mock function with given fields:
func (_m *BatchResults) QueryRow() pgx.Row {
	ret := _m.Called()

	var r0 pgx.Row
	if rf, ok := ret.Get(0).(func() pgx.Row); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}

	return r0
}

// BatchResults_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type BatchResults_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
func (_e *BatchResults_Expecter) QueryRow() *BatchResults_QueryRow_Call {
	return &BatchResults_QueryRow_Call{Call: _e.mock.On("QueryRow")}
}

func (_c *BatchResults_QueryRow_Call) Run(run func()) *BatchResults_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BatchResults_QueryRow_Call) Return(_a0 pgx.Row) *BatchResults_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewBatchResults interface {
	mock.TestingT
	Cleanup(func())
}

// NewBatchResults creates a new instance of BatchResults. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBatchResults(t mockConstructorTestingTNewBatchResults) *BatchResults {
	mock := &BatchResults{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
