// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CopyFromSource is an autogenerated mock type for the CopyFromSource type
type CopyFromSource struct {
	mock.Mock
}

type CopyFromSource_Expecter struct {
	mock *mock.Mock
}

func (_m *CopyFromSource) EXPECT() *CopyFromSource_Expecter {
	return &CopyFromSource_Expecter{mock: &_m.Mock}
}

// Err provides a mock function with given fields:
func (_m *CopyFromSource) Err() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyFromSource_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type CopyFromSource_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *CopyFromSource_Expecter) Err() *CopyFromSource_Err_Call {
	return &CopyFromSource_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *CopyFromSource_Err_Call) Run(run func()) *CopyFromSource_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CopyFromSource_Err_Call) Return(_a0 error) *CopyFromSource_Err_Call {
	_c.Call.Return(_a0)
	return _c
}

// Next provides a mock function with given fields:
func (_m *CopyFromSource) Next() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CopyFromSource_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type CopyFromSource_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *CopyFromSource_Expecter) Next() *CopyFromSource_Next_Call {
	return &CopyFromSource_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *CopyFromSource_Next_Call) Run(run func()) *CopyFromSource_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CopyFromSource_Next_Call) Return(_a0 bool) *CopyFromSource_Next_Call {
	_c.Call.Return(_a0)
	return _c
}

// Values provides a mock function with given fields:
func (_m *CopyFromSource) Values() ([]interface{}, error) {
	ret := _m.Called()

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func() []interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyFromSource_Values_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Values'
type CopyFromSource_Values_Call struct {
	*mock.Call
}

// Values is a helper method to define mock.On call
func (_e *CopyFromSource_Expecter) Values() *CopyFromSource_Values_Call {
	return &CopyFromSource_Values_Call{Call: _e.mock.On("Values")}
}

func (_c *CopyFromSource_Values_Call) Run(run func()) *CopyFromSource_Values_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CopyFromSource_Values_Call) Return(_a0 []interface{}, _a1 error) *CopyFromSource_Values_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCopyFromSource interface {
	mock.TestingT
	Cleanup(func())
}

// NewCopyFromSource creates a new instance of CopyFromSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCopyFromSource(t mockConstructorTestingTNewCopyFromSource) *CopyFromSource {
	mock := &CopyFromSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
