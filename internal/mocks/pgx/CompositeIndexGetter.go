// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CompositeIndexGetter is an autogenerated mock type for the CompositeIndexGetter type
type CompositeIndexGetter struct {
	mock.Mock
}

type CompositeIndexGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *CompositeIndexGetter) EXPECT() *CompositeIndexGetter_Expecter {
	return &CompositeIndexGetter_Expecter{mock: &_m.Mock}
}

// Index provides a mock function with given fields: i
func (_m *CompositeIndexGetter) Index(i int) interface{} {
	ret := _m.Called(i)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// CompositeIndexGetter_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type CompositeIndexGetter_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
//   - i int
func (_e *CompositeIndexGetter_Expecter) Index(i interface{}) *CompositeIndexGetter_Index_Call {
	return &CompositeIndexGetter_Index_Call{Call: _e.mock.On("Index", i)}
}

func (_c *CompositeIndexGetter_Index_Call) Run(run func(i int)) *CompositeIndexGetter_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CompositeIndexGetter_Index_Call) Return(_a0 interface{}) *CompositeIndexGetter_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

// IsNull provides a mock function with given fields:
func (_m *CompositeIndexGetter) IsNull() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CompositeIndexGetter_IsNull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNull'
type CompositeIndexGetter_IsNull_Call struct {
	*mock.Call
}

// IsNull is a helper method to define mock.On call
func (_e *CompositeIndexGetter_Expecter) IsNull() *CompositeIndexGetter_IsNull_Call {
	return &CompositeIndexGetter_IsNull_Call{Call: _e.mock.On("IsNull")}
}

func (_c *CompositeIndexGetter_IsNull_Call) Run(run func()) *CompositeIndexGetter_IsNull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CompositeIndexGetter_IsNull_Call) Return(_a0 bool) *CompositeIndexGetter_IsNull_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCompositeIndexGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompositeIndexGetter creates a new instance of CompositeIndexGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompositeIndexGetter(t mockConstructorTestingTNewCompositeIndexGetter) *CompositeIndexGetter {
	mock := &CompositeIndexGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
