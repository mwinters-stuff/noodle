// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// TryWrapEncodePlanFunc is an autogenerated mock type for the TryWrapEncodePlanFunc type
type TryWrapEncodePlanFunc struct {
	mock.Mock
}

type TryWrapEncodePlanFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *TryWrapEncodePlanFunc) EXPECT() *TryWrapEncodePlanFunc_Expecter {
	return &TryWrapEncodePlanFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: value
func (_m *TryWrapEncodePlanFunc) Execute(value interface{}) (pgtype.WrappedEncodePlanNextSetter, interface{}, bool) {
	ret := _m.Called(value)

	var r0 pgtype.WrappedEncodePlanNextSetter
	if rf, ok := ret.Get(0).(func(interface{}) pgtype.WrappedEncodePlanNextSetter); ok {
		r0 = rf(value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgtype.WrappedEncodePlanNextSetter)
		}
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func(interface{}) interface{}); ok {
		r1 = rf(value)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(interface{}) bool); ok {
		r2 = rf(value)
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// TryWrapEncodePlanFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type TryWrapEncodePlanFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - value interface{}
func (_e *TryWrapEncodePlanFunc_Expecter) Execute(value interface{}) *TryWrapEncodePlanFunc_Execute_Call {
	return &TryWrapEncodePlanFunc_Execute_Call{Call: _e.mock.On("Execute", value)}
}

func (_c *TryWrapEncodePlanFunc_Execute_Call) Run(run func(value interface{})) *TryWrapEncodePlanFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *TryWrapEncodePlanFunc_Execute_Call) Return(plan pgtype.WrappedEncodePlanNextSetter, nextValue interface{}, ok bool) *TryWrapEncodePlanFunc_Execute_Call {
	_c.Call.Return(plan, nextValue, ok)
	return _c
}

type mockConstructorTestingTNewTryWrapEncodePlanFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewTryWrapEncodePlanFunc creates a new instance of TryWrapEncodePlanFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTryWrapEncodePlanFunc(t mockConstructorTestingTNewTryWrapEncodePlanFunc) *TryWrapEncodePlanFunc {
	mock := &TryWrapEncodePlanFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
