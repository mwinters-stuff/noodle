// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	driver "database/sql/driver"

	mock "github.com/stretchr/testify/mock"

	pgtype "github.com/jackc/pgx/v5/pgtype"
)

// Codec is an autogenerated mock type for the Codec type
type Codec struct {
	mock.Mock
}

type Codec_Expecter struct {
	mock *mock.Mock
}

func (_m *Codec) EXPECT() *Codec_Expecter {
	return &Codec_Expecter{mock: &_m.Mock}
}

// DecodeDatabaseSQLValue provides a mock function with given fields: m, oid, format, src
func (_m *Codec) DecodeDatabaseSQLValue(m *pgtype.Map, oid uint32, format int16, src []byte) (driver.Value, error) {
	ret := _m.Called(m, oid, format, src)

	var r0 driver.Value
	if rf, ok := ret.Get(0).(func(*pgtype.Map, uint32, int16, []byte) driver.Value); ok {
		r0 = rf(m, oid, format, src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pgtype.Map, uint32, int16, []byte) error); ok {
		r1 = rf(m, oid, format, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Codec_DecodeDatabaseSQLValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeDatabaseSQLValue'
type Codec_DecodeDatabaseSQLValue_Call struct {
	*mock.Call
}

// DecodeDatabaseSQLValue is a helper method to define mock.On call
//   - m *pgtype.Map
//   - oid uint32
//   - format int16
//   - src []byte
func (_e *Codec_Expecter) DecodeDatabaseSQLValue(m interface{}, oid interface{}, format interface{}, src interface{}) *Codec_DecodeDatabaseSQLValue_Call {
	return &Codec_DecodeDatabaseSQLValue_Call{Call: _e.mock.On("DecodeDatabaseSQLValue", m, oid, format, src)}
}

func (_c *Codec_DecodeDatabaseSQLValue_Call) Run(run func(m *pgtype.Map, oid uint32, format int16, src []byte)) *Codec_DecodeDatabaseSQLValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pgtype.Map), args[1].(uint32), args[2].(int16), args[3].([]byte))
	})
	return _c
}

func (_c *Codec_DecodeDatabaseSQLValue_Call) Return(_a0 driver.Value, _a1 error) *Codec_DecodeDatabaseSQLValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DecodeValue provides a mock function with given fields: m, oid, format, src
func (_m *Codec) DecodeValue(m *pgtype.Map, oid uint32, format int16, src []byte) (interface{}, error) {
	ret := _m.Called(m, oid, format, src)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(*pgtype.Map, uint32, int16, []byte) interface{}); ok {
		r0 = rf(m, oid, format, src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*pgtype.Map, uint32, int16, []byte) error); ok {
		r1 = rf(m, oid, format, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Codec_DecodeValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeValue'
type Codec_DecodeValue_Call struct {
	*mock.Call
}

// DecodeValue is a helper method to define mock.On call
//   - m *pgtype.Map
//   - oid uint32
//   - format int16
//   - src []byte
func (_e *Codec_Expecter) DecodeValue(m interface{}, oid interface{}, format interface{}, src interface{}) *Codec_DecodeValue_Call {
	return &Codec_DecodeValue_Call{Call: _e.mock.On("DecodeValue", m, oid, format, src)}
}

func (_c *Codec_DecodeValue_Call) Run(run func(m *pgtype.Map, oid uint32, format int16, src []byte)) *Codec_DecodeValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pgtype.Map), args[1].(uint32), args[2].(int16), args[3].([]byte))
	})
	return _c
}

func (_c *Codec_DecodeValue_Call) Return(_a0 interface{}, _a1 error) *Codec_DecodeValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FormatSupported provides a mock function with given fields: _a0
func (_m *Codec) FormatSupported(_a0 int16) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int16) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Codec_FormatSupported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatSupported'
type Codec_FormatSupported_Call struct {
	*mock.Call
}

// FormatSupported is a helper method to define mock.On call
//   - _a0 int16
func (_e *Codec_Expecter) FormatSupported(_a0 interface{}) *Codec_FormatSupported_Call {
	return &Codec_FormatSupported_Call{Call: _e.mock.On("FormatSupported", _a0)}
}

func (_c *Codec_FormatSupported_Call) Run(run func(_a0 int16)) *Codec_FormatSupported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int16))
	})
	return _c
}

func (_c *Codec_FormatSupported_Call) Return(_a0 bool) *Codec_FormatSupported_Call {
	_c.Call.Return(_a0)
	return _c
}

// PlanEncode provides a mock function with given fields: m, oid, format, value
func (_m *Codec) PlanEncode(m *pgtype.Map, oid uint32, format int16, value interface{}) pgtype.EncodePlan {
	ret := _m.Called(m, oid, format, value)

	var r0 pgtype.EncodePlan
	if rf, ok := ret.Get(0).(func(*pgtype.Map, uint32, int16, interface{}) pgtype.EncodePlan); ok {
		r0 = rf(m, oid, format, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgtype.EncodePlan)
		}
	}

	return r0
}

// Codec_PlanEncode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlanEncode'
type Codec_PlanEncode_Call struct {
	*mock.Call
}

// PlanEncode is a helper method to define mock.On call
//   - m *pgtype.Map
//   - oid uint32
//   - format int16
//   - value interface{}
func (_e *Codec_Expecter) PlanEncode(m interface{}, oid interface{}, format interface{}, value interface{}) *Codec_PlanEncode_Call {
	return &Codec_PlanEncode_Call{Call: _e.mock.On("PlanEncode", m, oid, format, value)}
}

func (_c *Codec_PlanEncode_Call) Run(run func(m *pgtype.Map, oid uint32, format int16, value interface{})) *Codec_PlanEncode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pgtype.Map), args[1].(uint32), args[2].(int16), args[3].(interface{}))
	})
	return _c
}

func (_c *Codec_PlanEncode_Call) Return(_a0 pgtype.EncodePlan) *Codec_PlanEncode_Call {
	_c.Call.Return(_a0)
	return _c
}

// PlanScan provides a mock function with given fields: m, oid, format, target
func (_m *Codec) PlanScan(m *pgtype.Map, oid uint32, format int16, target interface{}) pgtype.ScanPlan {
	ret := _m.Called(m, oid, format, target)

	var r0 pgtype.ScanPlan
	if rf, ok := ret.Get(0).(func(*pgtype.Map, uint32, int16, interface{}) pgtype.ScanPlan); ok {
		r0 = rf(m, oid, format, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgtype.ScanPlan)
		}
	}

	return r0
}

// Codec_PlanScan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlanScan'
type Codec_PlanScan_Call struct {
	*mock.Call
}

// PlanScan is a helper method to define mock.On call
//   - m *pgtype.Map
//   - oid uint32
//   - format int16
//   - target interface{}
func (_e *Codec_Expecter) PlanScan(m interface{}, oid interface{}, format interface{}, target interface{}) *Codec_PlanScan_Call {
	return &Codec_PlanScan_Call{Call: _e.mock.On("PlanScan", m, oid, format, target)}
}

func (_c *Codec_PlanScan_Call) Run(run func(m *pgtype.Map, oid uint32, format int16, target interface{})) *Codec_PlanScan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pgtype.Map), args[1].(uint32), args[2].(int16), args[3].(interface{}))
	})
	return _c
}

func (_c *Codec_PlanScan_Call) Return(_a0 pgtype.ScanPlan) *Codec_PlanScan_Call {
	_c.Call.Return(_a0)
	return _c
}

// PreferredFormat provides a mock function with given fields:
func (_m *Codec) PreferredFormat() int16 {
	ret := _m.Called()

	var r0 int16
	if rf, ok := ret.Get(0).(func() int16); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int16)
	}

	return r0
}

// Codec_PreferredFormat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreferredFormat'
type Codec_PreferredFormat_Call struct {
	*mock.Call
}

// PreferredFormat is a helper method to define mock.On call
func (_e *Codec_Expecter) PreferredFormat() *Codec_PreferredFormat_Call {
	return &Codec_PreferredFormat_Call{Call: _e.mock.On("PreferredFormat")}
}

func (_c *Codec_PreferredFormat_Call) Run(run func()) *Codec_PreferredFormat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Codec_PreferredFormat_Call) Return(_a0 int16) *Codec_PreferredFormat_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCodec interface {
	mock.TestingT
	Cleanup(func())
}

// NewCodec creates a new instance of Codec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCodec(t mockConstructorTestingTNewCodec) *Codec {
	mock := &Codec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
