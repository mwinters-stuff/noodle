// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	pgtype "github.com/jackc/pgx/v5/pgtype"
	mock "github.com/stretchr/testify/mock"
)

// ArraySetter is an autogenerated mock type for the ArraySetter type
type ArraySetter struct {
	mock.Mock
}

type ArraySetter_Expecter struct {
	mock *mock.Mock
}

func (_m *ArraySetter) EXPECT() *ArraySetter_Expecter {
	return &ArraySetter_Expecter{mock: &_m.Mock}
}

// ScanIndex provides a mock function with given fields: i
func (_m *ArraySetter) ScanIndex(i int) interface{} {
	ret := _m.Called(i)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ArraySetter_ScanIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanIndex'
type ArraySetter_ScanIndex_Call struct {
	*mock.Call
}

// ScanIndex is a helper method to define mock.On call
//   - i int
func (_e *ArraySetter_Expecter) ScanIndex(i interface{}) *ArraySetter_ScanIndex_Call {
	return &ArraySetter_ScanIndex_Call{Call: _e.mock.On("ScanIndex", i)}
}

func (_c *ArraySetter_ScanIndex_Call) Run(run func(i int)) *ArraySetter_ScanIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ArraySetter_ScanIndex_Call) Return(_a0 interface{}) *ArraySetter_ScanIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

// ScanIndexType provides a mock function with given fields:
func (_m *ArraySetter) ScanIndexType() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// ArraySetter_ScanIndexType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanIndexType'
type ArraySetter_ScanIndexType_Call struct {
	*mock.Call
}

// ScanIndexType is a helper method to define mock.On call
func (_e *ArraySetter_Expecter) ScanIndexType() *ArraySetter_ScanIndexType_Call {
	return &ArraySetter_ScanIndexType_Call{Call: _e.mock.On("ScanIndexType")}
}

func (_c *ArraySetter_ScanIndexType_Call) Run(run func()) *ArraySetter_ScanIndexType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArraySetter_ScanIndexType_Call) Return(_a0 interface{}) *ArraySetter_ScanIndexType_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetDimensions provides a mock function with given fields: dimensions
func (_m *ArraySetter) SetDimensions(dimensions []pgtype.ArrayDimension) error {
	ret := _m.Called(dimensions)

	var r0 error
	if rf, ok := ret.Get(0).(func([]pgtype.ArrayDimension) error); ok {
		r0 = rf(dimensions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArraySetter_SetDimensions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDimensions'
type ArraySetter_SetDimensions_Call struct {
	*mock.Call
}

// SetDimensions is a helper method to define mock.On call
//   - dimensions []pgtype.ArrayDimension
func (_e *ArraySetter_Expecter) SetDimensions(dimensions interface{}) *ArraySetter_SetDimensions_Call {
	return &ArraySetter_SetDimensions_Call{Call: _e.mock.On("SetDimensions", dimensions)}
}

func (_c *ArraySetter_SetDimensions_Call) Run(run func(dimensions []pgtype.ArrayDimension)) *ArraySetter_SetDimensions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]pgtype.ArrayDimension))
	})
	return _c
}

func (_c *ArraySetter_SetDimensions_Call) Return(_a0 error) *ArraySetter_SetDimensions_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewArraySetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewArraySetter creates a new instance of ArraySetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArraySetter(t mockConstructorTestingTNewArraySetter) *ArraySetter {
	mock := &ArraySetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
