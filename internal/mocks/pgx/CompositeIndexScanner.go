// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CompositeIndexScanner is an autogenerated mock type for the CompositeIndexScanner type
type CompositeIndexScanner struct {
	mock.Mock
}

type CompositeIndexScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *CompositeIndexScanner) EXPECT() *CompositeIndexScanner_Expecter {
	return &CompositeIndexScanner_Expecter{mock: &_m.Mock}
}

// ScanIndex provides a mock function with given fields: i
func (_m *CompositeIndexScanner) ScanIndex(i int) interface{} {
	ret := _m.Called(i)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(int) interface{}); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// CompositeIndexScanner_ScanIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanIndex'
type CompositeIndexScanner_ScanIndex_Call struct {
	*mock.Call
}

// ScanIndex is a helper method to define mock.On call
//   - i int
func (_e *CompositeIndexScanner_Expecter) ScanIndex(i interface{}) *CompositeIndexScanner_ScanIndex_Call {
	return &CompositeIndexScanner_ScanIndex_Call{Call: _e.mock.On("ScanIndex", i)}
}

func (_c *CompositeIndexScanner_ScanIndex_Call) Run(run func(i int)) *CompositeIndexScanner_ScanIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *CompositeIndexScanner_ScanIndex_Call) Return(_a0 interface{}) *CompositeIndexScanner_ScanIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

// ScanNull provides a mock function with given fields:
func (_m *CompositeIndexScanner) ScanNull() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompositeIndexScanner_ScanNull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScanNull'
type CompositeIndexScanner_ScanNull_Call struct {
	*mock.Call
}

// ScanNull is a helper method to define mock.On call
func (_e *CompositeIndexScanner_Expecter) ScanNull() *CompositeIndexScanner_ScanNull_Call {
	return &CompositeIndexScanner_ScanNull_Call{Call: _e.mock.On("ScanNull")}
}

func (_c *CompositeIndexScanner_ScanNull_Call) Run(run func()) *CompositeIndexScanner_ScanNull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CompositeIndexScanner_ScanNull_Call) Return(_a0 error) *CompositeIndexScanner_ScanNull_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCompositeIndexScanner interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompositeIndexScanner creates a new instance of CompositeIndexScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompositeIndexScanner(t mockConstructorTestingTNewCompositeIndexScanner) *CompositeIndexScanner {
	mock := &CompositeIndexScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
