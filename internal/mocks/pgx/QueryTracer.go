// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// QueryTracer is an autogenerated mock type for the QueryTracer type
type QueryTracer struct {
	mock.Mock
}

type QueryTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryTracer) EXPECT() *QueryTracer_Expecter {
	return &QueryTracer_Expecter{mock: &_m.Mock}
}

// TraceQueryEnd provides a mock function with given fields: ctx, conn, data
func (_m *QueryTracer) TraceQueryEnd(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryEndData) {
	_m.Called(ctx, conn, data)
}

// QueryTracer_TraceQueryEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceQueryEnd'
type QueryTracer_TraceQueryEnd_Call struct {
	*mock.Call
}

// TraceQueryEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceQueryEndData
func (_e *QueryTracer_Expecter) TraceQueryEnd(ctx interface{}, conn interface{}, data interface{}) *QueryTracer_TraceQueryEnd_Call {
	return &QueryTracer_TraceQueryEnd_Call{Call: _e.mock.On("TraceQueryEnd", ctx, conn, data)}
}

func (_c *QueryTracer_TraceQueryEnd_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryEndData)) *QueryTracer_TraceQueryEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceQueryEndData))
	})
	return _c
}

func (_c *QueryTracer_TraceQueryEnd_Call) Return() *QueryTracer_TraceQueryEnd_Call {
	_c.Call.Return()
	return _c
}

// TraceQueryStart provides a mock function with given fields: ctx, conn, data
func (_m *QueryTracer) TraceQueryStart(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryStartData) context.Context {
	ret := _m.Called(ctx, conn, data)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Conn, pgx.TraceQueryStartData) context.Context); ok {
		r0 = rf(ctx, conn, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// QueryTracer_TraceQueryStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceQueryStart'
type QueryTracer_TraceQueryStart_Call struct {
	*mock.Call
}

// TraceQueryStart is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceQueryStartData
func (_e *QueryTracer_Expecter) TraceQueryStart(ctx interface{}, conn interface{}, data interface{}) *QueryTracer_TraceQueryStart_Call {
	return &QueryTracer_TraceQueryStart_Call{Call: _e.mock.On("TraceQueryStart", ctx, conn, data)}
}

func (_c *QueryTracer_TraceQueryStart_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceQueryStartData)) *QueryTracer_TraceQueryStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceQueryStartData))
	})
	return _c
}

func (_c *QueryTracer_TraceQueryStart_Call) Return(_a0 context.Context) *QueryTracer_TraceQueryStart_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewQueryTracer interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryTracer creates a new instance of QueryTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryTracer(t mockConstructorTestingTNewQueryTracer) *QueryTracer {
	mock := &QueryTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
