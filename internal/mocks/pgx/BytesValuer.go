// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// BytesValuer is an autogenerated mock type for the BytesValuer type
type BytesValuer struct {
	mock.Mock
}

type BytesValuer_Expecter struct {
	mock *mock.Mock
}

func (_m *BytesValuer) EXPECT() *BytesValuer_Expecter {
	return &BytesValuer_Expecter{mock: &_m.Mock}
}

// BytesValue provides a mock function with given fields:
func (_m *BytesValuer) BytesValue() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BytesValuer_BytesValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BytesValue'
type BytesValuer_BytesValue_Call struct {
	*mock.Call
}

// BytesValue is a helper method to define mock.On call
func (_e *BytesValuer_Expecter) BytesValue() *BytesValuer_BytesValue_Call {
	return &BytesValuer_BytesValue_Call{Call: _e.mock.On("BytesValue")}
}

func (_c *BytesValuer_BytesValue_Call) Run(run func()) *BytesValuer_BytesValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BytesValuer_BytesValue_Call) Return(_a0 []byte, _a1 error) *BytesValuer_BytesValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewBytesValuer interface {
	mock.TestingT
	Cleanup(func())
}

// NewBytesValuer creates a new instance of BytesValuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBytesValuer(t mockConstructorTestingTNewBytesValuer) *BytesValuer {
	mock := &BytesValuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
