// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// DialFunc is an autogenerated mock type for the DialFunc type
type DialFunc struct {
	mock.Mock
}

type DialFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *DialFunc) EXPECT() *DialFunc_Expecter {
	return &DialFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, network, addr
func (_m *DialFunc) Execute(ctx context.Context, network string, addr string) (net.Conn, error) {
	ret := _m.Called(ctx, network, addr)

	var r0 net.Conn
	if rf, ok := ret.Get(0).(func(context.Context, string, string) net.Conn); ok {
		r0 = rf(ctx, network, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, network, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DialFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type DialFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - network string
//   - addr string
func (_e *DialFunc_Expecter) Execute(ctx interface{}, network interface{}, addr interface{}) *DialFunc_Execute_Call {
	return &DialFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, network, addr)}
}

func (_c *DialFunc_Execute_Call) Run(run func(ctx context.Context, network string, addr string)) *DialFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DialFunc_Execute_Call) Return(_a0 net.Conn, _a1 error) *DialFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewDialFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewDialFunc creates a new instance of DialFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDialFunc(t mockConstructorTestingTNewDialFunc) *DialFunc {
	mock := &DialFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
