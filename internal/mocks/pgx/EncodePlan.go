// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EncodePlan is an autogenerated mock type for the EncodePlan type
type EncodePlan struct {
	mock.Mock
}

type EncodePlan_Expecter struct {
	mock *mock.Mock
}

func (_m *EncodePlan) EXPECT() *EncodePlan_Expecter {
	return &EncodePlan_Expecter{mock: &_m.Mock}
}

// Encode provides a mock function with given fields: value, buf
func (_m *EncodePlan) Encode(value interface{}, buf []byte) ([]byte, error) {
	ret := _m.Called(value, buf)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(interface{}, []byte) []byte); ok {
		r0 = rf(value, buf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, []byte) error); ok {
		r1 = rf(value, buf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncodePlan_Encode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encode'
type EncodePlan_Encode_Call struct {
	*mock.Call
}

// Encode is a helper method to define mock.On call
//   - value interface{}
//   - buf []byte
func (_e *EncodePlan_Expecter) Encode(value interface{}, buf interface{}) *EncodePlan_Encode_Call {
	return &EncodePlan_Encode_Call{Call: _e.mock.On("Encode", value, buf)}
}

func (_c *EncodePlan_Encode_Call) Run(run func(value interface{}, buf []byte)) *EncodePlan_Encode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].([]byte))
	})
	return _c
}

func (_c *EncodePlan_Encode_Call) Return(newBuf []byte, err error) *EncodePlan_Encode_Call {
	_c.Call.Return(newBuf, err)
	return _c
}

type mockConstructorTestingTNewEncodePlan interface {
	mock.TestingT
	Cleanup(func())
}

// NewEncodePlan creates a new instance of EncodePlan. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEncodePlan(t mockConstructorTestingTNewEncodePlan) *EncodePlan {
	mock := &EncodePlan{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
