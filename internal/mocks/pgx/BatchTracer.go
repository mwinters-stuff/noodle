// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	pgx "github.com/jackc/pgx/v5"
	mock "github.com/stretchr/testify/mock"
)

// BatchTracer is an autogenerated mock type for the BatchTracer type
type BatchTracer struct {
	mock.Mock
}

type BatchTracer_Expecter struct {
	mock *mock.Mock
}

func (_m *BatchTracer) EXPECT() *BatchTracer_Expecter {
	return &BatchTracer_Expecter{mock: &_m.Mock}
}

// TraceBatchEnd provides a mock function with given fields: ctx, conn, data
func (_m *BatchTracer) TraceBatchEnd(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchEndData) {
	_m.Called(ctx, conn, data)
}

// BatchTracer_TraceBatchEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceBatchEnd'
type BatchTracer_TraceBatchEnd_Call struct {
	*mock.Call
}

// TraceBatchEnd is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceBatchEndData
func (_e *BatchTracer_Expecter) TraceBatchEnd(ctx interface{}, conn interface{}, data interface{}) *BatchTracer_TraceBatchEnd_Call {
	return &BatchTracer_TraceBatchEnd_Call{Call: _e.mock.On("TraceBatchEnd", ctx, conn, data)}
}

func (_c *BatchTracer_TraceBatchEnd_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchEndData)) *BatchTracer_TraceBatchEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceBatchEndData))
	})
	return _c
}

func (_c *BatchTracer_TraceBatchEnd_Call) Return() *BatchTracer_TraceBatchEnd_Call {
	_c.Call.Return()
	return _c
}

// TraceBatchQuery provides a mock function with given fields: ctx, conn, data
func (_m *BatchTracer) TraceBatchQuery(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchQueryData) {
	_m.Called(ctx, conn, data)
}

// BatchTracer_TraceBatchQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceBatchQuery'
type BatchTracer_TraceBatchQuery_Call struct {
	*mock.Call
}

// TraceBatchQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceBatchQueryData
func (_e *BatchTracer_Expecter) TraceBatchQuery(ctx interface{}, conn interface{}, data interface{}) *BatchTracer_TraceBatchQuery_Call {
	return &BatchTracer_TraceBatchQuery_Call{Call: _e.mock.On("TraceBatchQuery", ctx, conn, data)}
}

func (_c *BatchTracer_TraceBatchQuery_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchQueryData)) *BatchTracer_TraceBatchQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceBatchQueryData))
	})
	return _c
}

func (_c *BatchTracer_TraceBatchQuery_Call) Return() *BatchTracer_TraceBatchQuery_Call {
	_c.Call.Return()
	return _c
}

// TraceBatchStart provides a mock function with given fields: ctx, conn, data
func (_m *BatchTracer) TraceBatchStart(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchStartData) context.Context {
	ret := _m.Called(ctx, conn, data)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, *pgx.Conn, pgx.TraceBatchStartData) context.Context); ok {
		r0 = rf(ctx, conn, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// BatchTracer_TraceBatchStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TraceBatchStart'
type BatchTracer_TraceBatchStart_Call struct {
	*mock.Call
}

// TraceBatchStart is a helper method to define mock.On call
//   - ctx context.Context
//   - conn *pgx.Conn
//   - data pgx.TraceBatchStartData
func (_e *BatchTracer_Expecter) TraceBatchStart(ctx interface{}, conn interface{}, data interface{}) *BatchTracer_TraceBatchStart_Call {
	return &BatchTracer_TraceBatchStart_Call{Call: _e.mock.On("TraceBatchStart", ctx, conn, data)}
}

func (_c *BatchTracer_TraceBatchStart_Call) Run(run func(ctx context.Context, conn *pgx.Conn, data pgx.TraceBatchStartData)) *BatchTracer_TraceBatchStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pgx.Conn), args[2].(pgx.TraceBatchStartData))
	})
	return _c
}

func (_c *BatchTracer_TraceBatchStart_Call) Return(_a0 context.Context) *BatchTracer_TraceBatchStart_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewBatchTracer interface {
	mock.TestingT
	Cleanup(func())
}

// NewBatchTracer creates a new instance of BatchTracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBatchTracer(t mockConstructorTestingTNewBatchTracer) *BatchTracer {
	mock := &BatchTracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
